/**
 * Sofia Api
 * Api principal do sistema Sofia.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface BalancePointResultEntity
 */
export interface BalancePointResultEntity {
    /**
     *
     * @type {number}
     * @memberof BalancePointResultEntity
     */
    'amountInCents'?: number;
}
/**
 *
 * @export
 * @interface BankAccountEntity
 */
export interface BankAccountEntity {
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'bankConnectionId': string;
    /**
     *
     * @type {BankConnectionEntity}
     * @memberof BankAccountEntity
     */
    'bankConnection': BankConnectionEntity;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'providerAccountId': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'type': string;
    /**
     *
     * @type {boolean}
     * @memberof BankAccountEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'number': string;
    /**
     *
     * @type {number}
     * @memberof BankAccountEntity
     */
    'balance': number;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'currencyCode': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankAccountEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankAccountsBalanceReportEntity
 */
export interface BankAccountsBalanceReportEntity {
    /**
     *
     * @type {Array<BankAccountsBalanceReportItemEntity>}
     * @memberof BankAccountsBalanceReportEntity
     */
    'items': Array<BankAccountsBalanceReportItemEntity>;
    /**
     *
     * @type {Array<BankAccountEntity>}
     * @memberof BankAccountsBalanceReportEntity
     */
    'bankAccounts': Array<BankAccountEntity>;
}
/**
 *
 * @export
 * @interface BankAccountsBalanceReportItemEntity
 */
export interface BankAccountsBalanceReportItemEntity {
    /**
     *
     * @type {number}
     * @memberof BankAccountsBalanceReportItemEntity
     */
    'totalBalance': number;
    /**
     *
     * @type {string}
     * @memberof BankAccountsBalanceReportItemEntity
     */
    'currencyCode': string;
}
/**
 *
 * @export
 * @interface BankConnectionEntity
 */
export interface BankConnectionEntity {
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'createdByUserId': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {boolean}
     * @memberof BankConnectionEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'providerItemId': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'historyRange': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'connectorId': string;
    /**
     *
     * @type {BankConnectorEntity}
     * @memberof BankConnectionEntity
     */
    'connector': BankConnectorEntity;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankConnectionWithAccountsEntity
 */
export interface BankConnectionWithAccountsEntity {
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'createdByUserId': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {Array<PlainBankAccountEntity>}
     * @memberof BankConnectionWithAccountsEntity
     */
    'accounts': Array<PlainBankAccountEntity>;
    /**
     *
     * @type {boolean}
     * @memberof BankConnectionWithAccountsEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'providerItemId': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'historyRange': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'connectorId': string;
    /**
     *
     * @type {BankConnectorEntity}
     * @memberof BankConnectionWithAccountsEntity
     */
    'connector': BankConnectorEntity;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectionWithAccountsEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankConnectorEntity
 */
export interface BankConnectorEntity {
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'institutionUrl': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'imageUrl': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'primaryColor': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'country': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankConnectorEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankTransactionCategoryEntity
 */
export interface BankTransactionCategoryEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryEntity
     */
    'nature': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryEntity
     */
    'parentId'?: string;
    /**
     *
     * @type {Array<BankTransactionCategoryPlainEntity>}
     * @memberof BankTransactionCategoryEntity
     */
    'path': Array<BankTransactionCategoryPlainEntity>;
    /**
     *
     * @type {Array<BankTransactionCategoryPlainEntity>}
     * @memberof BankTransactionCategoryEntity
     */
    'children': Array<BankTransactionCategoryPlainEntity>;
}
/**
 *
 * @export
 * @interface BankTransactionCategoryPlainEntity
 */
export interface BankTransactionCategoryPlainEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryPlainEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryPlainEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryPlainEntity
     */
    'nature': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCategoryPlainEntity
     */
    'parentId'?: string;
}
/**
 *
 * @export
 * @interface BankTransactionCreditCardMetadataEntity
 */
export interface BankTransactionCreditCardMetadataEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'transactionId': string;
    /**
     *
     * @type {number}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'installmentNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'totalInstallments'?: number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'totalAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'payeeMCC'?: number;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'cardNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'billId'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionCreditCardMetadataEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankTransactionEntity
 */
export interface BankTransactionEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'accountId': string;
    /**
     *
     * @type {BankAccountEntity}
     * @memberof BankTransactionEntity
     */
    'account': BankAccountEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'provider': BankTransactionEntityProviderEnum;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'providerTransactionId': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'originalDescription': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'postedDate': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'competencyDate': string;
    /**
     *
     * @type {number}
     * @memberof BankTransactionEntity
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'type': BankTransactionEntityTypeEnum;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'status': BankTransactionEntityStatusEnum;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'legalNature': BankTransactionEntityLegalNatureEnum;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'providerCategoryId'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'providerCategoryName'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'categoryId'?: string;
    /**
     *
     * @type {BankTransactionCategoryPlainEntity}
     * @memberof BankTransactionEntity
     */
    'category'?: BankTransactionCategoryPlainEntity;
    /**
     *
     * @type {Array<BankTransactionTagEntity>}
     * @memberof BankTransactionEntity
     */
    'tags': Array<BankTransactionTagEntity>;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'paymentDataId'?: string;
    /**
     *
     * @type {BankTransactionPaymentDataEntity}
     * @memberof BankTransactionEntity
     */
    'paymentData'?: BankTransactionPaymentDataEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'creditCardMetadataId'?: string;
    /**
     *
     * @type {BankTransactionCreditCardMetadataEntity}
     * @memberof BankTransactionEntity
     */
    'creditCardMetadata'?: BankTransactionCreditCardMetadataEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'bestGuessCategoryId'?: string;
    /**
     *
     * @type {BankTransactionCategoryPlainEntity}
     * @memberof BankTransactionEntity
     */
    'bestGuessCategory'?: BankTransactionCategoryPlainEntity;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'ignoredAt'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'confirmedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionEntity
     */
    'updatedAt': string;
}
export declare const BankTransactionEntityProviderEnum: {
    readonly Pluggy: "PLUGGY";
    readonly Sofia: "SOFIA";
};
export type BankTransactionEntityProviderEnum = typeof BankTransactionEntityProviderEnum[keyof typeof BankTransactionEntityProviderEnum];
export declare const BankTransactionEntityTypeEnum: {
    readonly Debit: "DEBIT";
    readonly Credit: "CREDIT";
    readonly Undefined: "UNDEFINED";
};
export type BankTransactionEntityTypeEnum = typeof BankTransactionEntityTypeEnum[keyof typeof BankTransactionEntityTypeEnum];
export declare const BankTransactionEntityStatusEnum: {
    readonly Pending: "PENDING";
    readonly Posted: "POSTED";
};
export type BankTransactionEntityStatusEnum = typeof BankTransactionEntityStatusEnum[keyof typeof BankTransactionEntityStatusEnum];
export declare const BankTransactionEntityLegalNatureEnum: {
    readonly Personal: "PERSONAL";
    readonly Business: "BUSINESS";
};
export type BankTransactionEntityLegalNatureEnum = typeof BankTransactionEntityLegalNatureEnum[keyof typeof BankTransactionEntityLegalNatureEnum];
/**
 *
 * @export
 * @interface BankTransactionIndicatorEntity
 */
export interface BankTransactionIndicatorEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionIndicatorEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionIndicatorEntity
     */
    'prettyId': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionIndicatorEntity
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionIndicatorEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionIndicatorEntity
     */
    'description': string;
    /**
     *
     * @type {object}
     * @memberof BankTransactionIndicatorEntity
     */
    'data': object;
    /**
     *
     * @type {DreLineOutcomeResultEntity}
     * @memberof BankTransactionIndicatorEntity
     */
    'dreLineOutcomeResult'?: DreLineOutcomeResultEntity;
    /**
     *
     * @type {BalancePointResultEntity}
     * @memberof BankTransactionIndicatorEntity
     */
    'balancePointResult'?: BalancePointResultEntity;
    /**
     *
     * @type {MeanResultEntity}
     * @memberof BankTransactionIndicatorEntity
     */
    'meanResult'?: MeanResultEntity;
    /**
     *
     * @type {ProportionResultEntity}
     * @memberof BankTransactionIndicatorEntity
     */
    'proportionResult'?: ProportionResultEntity;
}
/**
 *
 * @export
 * @interface BankTransactionPaymentDataEntity
 */
export interface BankTransactionPaymentDataEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'transactionId': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payeerName'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerBranchNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerAccountNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerRoutingNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerRoutingNumberISPB'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerDocumentNumberType'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'payerDocumentNumberValue'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'reason'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverName'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverBranchNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverAccountNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverRoutingNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverRoutingNumberISPB'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverDocumentNumberType'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverDocumentNumberValue'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'paymentMethod'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'referenceNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'receiverReferenceId'?: string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionPaymentDataEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankTransactionTagEntity
 */
export interface BankTransactionTagEntity {
    /**
     *
     * @type {string}
     * @memberof BankTransactionTagEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionTagEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionTagEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof BankTransactionTagEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface BankTransactionsPageEntity
 */
export interface BankTransactionsPageEntity {
    /**
     *
     * @type {number}
     * @memberof BankTransactionsPageEntity
     */
    'pageIndex': number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionsPageEntity
     */
    'pageSize': number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionsPageEntity
     */
    'totalItems': number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionsPageEntity
     */
    'totalPages': number;
    /**
     *
     * @type {Array<BankTransactionEntity>}
     * @memberof BankTransactionsPageEntity
     */
    'items': Array<BankTransactionEntity>;
}
/**
 *
 * @export
 * @interface BankTransactionsTotalsEntity
 */
export interface BankTransactionsTotalsEntity {
    /**
     *
     * @type {number}
     * @memberof BankTransactionsTotalsEntity
     */
    'entriesInCents'?: number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionsTotalsEntity
     */
    'outflowsInCents'?: number;
    /**
     *
     * @type {number}
     * @memberof BankTransactionsTotalsEntity
     */
    'outcomeInCents'?: number;
}
/**
 *
 * @export
 * @interface CashFlowByCategoryReportEntity
 */
export interface CashFlowByCategoryReportEntity {
    /**
     *
     * @type {Array<CashFlowByCategoryReportItemEntity>}
     * @memberof CashFlowByCategoryReportEntity
     */
    'items': Array<CashFlowByCategoryReportItemEntity>;
}
/**
 *
 * @export
 * @interface CashFlowByCategoryReportItemEntity
 */
export interface CashFlowByCategoryReportItemEntity {
    /**
     *
     * @type {string}
     * @memberof CashFlowByCategoryReportItemEntity
     */
    'categoryId': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowByCategoryReportItemEntity
     */
    'categoryName': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowByCategoryReportItemEntity
     */
    'absoluteValue': number;
    /**
     *
     * @type {number}
     * @memberof CashFlowByCategoryReportItemEntity
     */
    'percentage': number;
}
/**
 *
 * @export
 * @interface CashFlowReportDailyItemEntity
 */
export interface CashFlowReportDailyItemEntity {
    /**
     *
     * @type {number}
     * @memberof CashFlowReportDailyItemEntity
     */
    'index': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportDailyItemEntity
     */
    'date': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportDailyItemEntity
     */
    'dayOfYear': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportDailyItemEntity
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportDailyItemEntity
     */
    'minDate': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportDailyItemEntity
     */
    'maxDate': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportDailyItemEntity
     */
    'value'?: number;
}
/**
 *
 * @export
 * @interface CashFlowReportEntity
 */
export interface CashFlowReportEntity {
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyBalanceItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyPostedIncomeItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyCompetencyIncomeItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyPostedOutcomeItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportDailyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'dailyCompetencyOutcomeItems': Array<CashFlowReportDailyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyBalanceItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyPostedIncomeItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyCompetencyIncomeItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyPostedOutcomeItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportWeeklyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'weeklyCompetencyOutcomeItems': Array<CashFlowReportWeeklyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyBalanceItems': Array<CashFlowReportMonthlyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyPostedIncomeItems': Array<CashFlowReportMonthlyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyCompetencyIncomeItems': Array<CashFlowReportMonthlyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyPostedOutcomeItems': Array<CashFlowReportMonthlyItemEntity>;
    /**
     *
     * @type {Array<CashFlowReportMonthlyItemEntity>}
     * @memberof CashFlowReportEntity
     */
    'monthlyCompetencyOutcomeItems': Array<CashFlowReportMonthlyItemEntity>;
}
/**
 *
 * @export
 * @interface CashFlowReportMonthlyItemEntity
 */
export interface CashFlowReportMonthlyItemEntity {
    /**
     *
     * @type {number}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'index': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'date': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'month': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'minDate': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'maxDate': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportMonthlyItemEntity
     */
    'value'?: number;
}
/**
 *
 * @export
 * @interface CashFlowReportWeeklyItemEntity
 */
export interface CashFlowReportWeeklyItemEntity {
    /**
     *
     * @type {number}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'index': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'date': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'week': number;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'minDate': string;
    /**
     *
     * @type {string}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'maxDate': string;
    /**
     *
     * @type {number}
     * @memberof CashFlowReportWeeklyItemEntity
     */
    'value'?: number;
}
/**
 *
 * @export
 * @interface CategoryGuessDto
 */
export interface CategoryGuessDto {
    /**
     *
     * @type {string}
     * @memberof CategoryGuessDto
     */
    'categoryId': string;
    /**
     *
     * @type {string}
     * @memberof CategoryGuessDto
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof CategoryGuessDto
     */
    'score': number;
    /**
     *
     * @type {string}
     * @memberof CategoryGuessDto
     */
    'origin': string;
}
/**
 *
 * @export
 * @interface CreateBankTransactionTagRequestDto
 */
export interface CreateBankTransactionTagRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateBankTransactionTagRequestDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateOrUpdateBankAccountRequestDto
 */
export interface CreateOrUpdateBankAccountRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'bankConnectionId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'providerAccountId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'number': string;
    /**
     *
     * @type {number}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'balance': number;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'currencyCode': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankAccountRequestDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateOrUpdateBankConnectionRequestDto
 */
export interface CreateOrUpdateBankConnectionRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'createdByUserId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'providerItemId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'providerConnectorId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankConnectionRequestDto
     */
    'historyRange': string;
}
/**
 *
 * @export
 * @interface CreateOrUpdateBankTransactionsInBulkItemDto
 */
export interface CreateOrUpdateBankTransactionsInBulkItemDto {
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'accountId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'providerTransactionId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'postedDate': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'competencyDate': string;
    /**
     *
     * @type {number}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'amount': number;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'legalNature': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'providerCategoryId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'providerCategoryName'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'categoryId': string;
    /**
     *
     * @type {PaymentDataDto}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'paymentData': PaymentDataDto;
    /**
     *
     * @type {CreditCardMetadataDto}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'creditCardMetadata': CreditCardMetadataDto;
    /**
     *
     * @type {Array<CategoryGuessDto>}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'categoryGuesses'?: Array<CategoryGuessDto>;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateBankTransactionsInBulkItemDto
     */
    'bestGuessCategoryId': string;
}
/**
 *
 * @export
 * @interface CreateOrUpdateBankTransactionsInBulkRequestDto
 */
export interface CreateOrUpdateBankTransactionsInBulkRequestDto {
    /**
     *
     * @type {Array<CreateOrUpdateBankTransactionsInBulkItemDto>}
     * @memberof CreateOrUpdateBankTransactionsInBulkRequestDto
     */
    'items': Array<CreateOrUpdateBankTransactionsInBulkItemDto>;
}
/**
 *
 * @export
 * @interface CreateOrUpdateMessageTokenRequestDto
 */
export interface CreateOrUpdateMessageTokenRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateMessageTokenRequestDto
     */
    'platform': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateMessageTokenRequestDto
     */
    'deviceId': string;
    /**
     *
     * @type {string}
     * @memberof CreateOrUpdateMessageTokenRequestDto
     */
    'token': string;
}
/**
 *
 * @export
 * @interface CreatePluggyConnectTokenRequestDto
 */
export interface CreatePluggyConnectTokenRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreatePluggyConnectTokenRequestDto
     */
    'itemId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePluggyConnectTokenRequestDto
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof CreatePluggyConnectTokenRequestDto
     */
    'historyRange': string;
}
/**
 *
 * @export
 * @interface CreateProfileRequestDto
 */
export interface CreateProfileRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateProfileRequestDto
     */
    'fullName': string;
    /**
     *
     * @type {string}
     * @memberof CreateProfileRequestDto
     */
    'birthDate': string;
}
/**
 *
 * @export
 * @interface CreateWorkspaceRequestDto
 */
export interface CreateWorkspaceRequestDto {
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceRequestDto
     */
    'prettyId': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceRequestDto
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceRequestDto
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceRequestDto
     */
    'businessSegment'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateWorkspaceRequestDto
     */
    'otherDescription'?: string;
}
/**
 *
 * @export
 * @interface CredentialsEntity
 */
export interface CredentialsEntity {
    /**
     *
     * @type {string}
     * @memberof CredentialsEntity
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof CredentialsEntity
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof CredentialsEntity
     */
    'refreshToken': string;
}
/**
 *
 * @export
 * @interface CreditCardMetadataDto
 */
export interface CreditCardMetadataDto {
    /**
     *
     * @type {number}
     * @memberof CreditCardMetadataDto
     */
    'installmentNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof CreditCardMetadataDto
     */
    'totalInstallments'?: number;
    /**
     *
     * @type {number}
     * @memberof CreditCardMetadataDto
     */
    'totalAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof CreditCardMetadataDto
     */
    'payeeMCC'?: number;
    /**
     *
     * @type {string}
     * @memberof CreditCardMetadataDto
     */
    'cardNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof CreditCardMetadataDto
     */
    'billId'?: string;
}
/**
 *
 * @export
 * @interface DreLineOutcomeResultEntity
 */
export interface DreLineOutcomeResultEntity {
    /**
     *
     * @type {number}
     * @memberof DreLineOutcomeResultEntity
     */
    'amountInCents': number;
    /**
     *
     * @type {number}
     * @memberof DreLineOutcomeResultEntity
     */
    'ratio'?: number;
}
/**
 *
 * @export
 * @interface EmailInUseReportEntity
 */
export interface EmailInUseReportEntity {
    /**
     *
     * @type {string}
     * @memberof EmailInUseReportEntity
     */
    'email': string;
    /**
     *
     * @type {boolean}
     * @memberof EmailInUseReportEntity
     */
    'inUse': boolean;
}
/**
 *
 * @export
 * @interface ExceptionResponseEntity
 */
export interface ExceptionResponseEntity {
    /**
     *
     * @type {number}
     * @memberof ExceptionResponseEntity
     */
    'statusCode': number;
    /**
     *
     * @type {string}
     * @memberof ExceptionResponseEntity
     */
    'message': string;
    /**
     *
     * @type {Array<ExceptionResponseEntityErrorsInner>}
     * @memberof ExceptionResponseEntity
     */
    'errors': Array<ExceptionResponseEntityErrorsInner>;
}
/**
 *
 * @export
 * @interface ExceptionResponseEntityErrorsInner
 */
export interface ExceptionResponseEntityErrorsInner {
    /**
     *
     * @type {string}
     * @memberof ExceptionResponseEntityErrorsInner
     */
    'fieldPath': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ExceptionResponseEntityErrorsInner
     */
    'messages': Array<string>;
}
/**
 *
 * @export
 * @interface FinancialStatementOutcomeReportDataEntity
 */
export interface FinancialStatementOutcomeReportDataEntity {
    /**
     *
     * @type {string}
     * @memberof FinancialStatementOutcomeReportDataEntity
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof FinancialStatementOutcomeReportDataEntity
     */
    'outcome': number;
    /**
     *
     * @type {number}
     * @memberof FinancialStatementOutcomeReportDataEntity
     */
    'percentage'?: number;
}
/**
 *
 * @export
 * @interface FinancialStatementOutflowsSubcategoryData
 */
export interface FinancialStatementOutflowsSubcategoryData {
    /**
     *
     * @type {string}
     * @memberof FinancialStatementOutflowsSubcategoryData
     */
    'subcategoryId': string;
    /**
     *
     * @type {string}
     * @memberof FinancialStatementOutflowsSubcategoryData
     */
    'subcategoryName': string;
    /**
     *
     * @type {number}
     * @memberof FinancialStatementOutflowsSubcategoryData
     */
    'outcome': number;
}
/**
 *
 * @export
 * @interface FinancialStatementOutlfowsCategoryData
 */
export interface FinancialStatementOutlfowsCategoryData {
    /**
     *
     * @type {string}
     * @memberof FinancialStatementOutlfowsCategoryData
     */
    'categoryId': string;
    /**
     *
     * @type {string}
     * @memberof FinancialStatementOutlfowsCategoryData
     */
    'categoryName': string;
    /**
     *
     * @type {number}
     * @memberof FinancialStatementOutlfowsCategoryData
     */
    'outcome': number;
    /**
     *
     * @type {Array<FinancialStatementOutflowsSubcategoryData>}
     * @memberof FinancialStatementOutlfowsCategoryData
     */
    'subcategories': Array<FinancialStatementOutflowsSubcategoryData>;
}
/**
 *
 * @export
 * @interface FinancialStatementReport
 */
export interface FinancialStatementReport {
    /**
     *
     * @type {Array<FinancialStatementReportItemEntity>}
     * @memberof FinancialStatementReport
     */
    'items': Array<FinancialStatementReportItemEntity>;
}
/**
 *
 * @export
 * @interface FinancialStatementReportItemEntity
 */
export interface FinancialStatementReportItemEntity {
    /**
     *
     * @type {string}
     * @memberof FinancialStatementReportItemEntity
     */
    'type': string;
    /**
     *
     * @type {FinancialStatementeEntriesCategoryData}
     * @memberof FinancialStatementReportItemEntity
     */
    'entriesCategoryData'?: FinancialStatementeEntriesCategoryData;
    /**
     *
     * @type {FinancialStatementOutlfowsCategoryData}
     * @memberof FinancialStatementReportItemEntity
     */
    'outflowsCategoryData'?: FinancialStatementOutlfowsCategoryData;
    /**
     *
     * @type {FinancialStatementOutcomeReportDataEntity}
     * @memberof FinancialStatementReportItemEntity
     */
    'outcomeData'?: FinancialStatementOutcomeReportDataEntity;
}
/**
 *
 * @export
 * @interface FinancialStatementeEntriesCategoryData
 */
export interface FinancialStatementeEntriesCategoryData {
    /**
     *
     * @type {string}
     * @memberof FinancialStatementeEntriesCategoryData
     */
    'categoryId': string;
    /**
     *
     * @type {string}
     * @memberof FinancialStatementeEntriesCategoryData
     */
    'categoryName': string;
    /**
     *
     * @type {number}
     * @memberof FinancialStatementeEntriesCategoryData
     */
    'outcome': number;
    /**
     *
     * @type {Array<FinancialStatementeEntriesSubcategoryData>}
     * @memberof FinancialStatementeEntriesCategoryData
     */
    'subcategories': Array<FinancialStatementeEntriesSubcategoryData>;
}
/**
 *
 * @export
 * @interface FinancialStatementeEntriesSubcategoryData
 */
export interface FinancialStatementeEntriesSubcategoryData {
    /**
     *
     * @type {string}
     * @memberof FinancialStatementeEntriesSubcategoryData
     */
    'subcategoryId': string;
    /**
     *
     * @type {string}
     * @memberof FinancialStatementeEntriesSubcategoryData
     */
    'subcategoryName': string;
    /**
     *
     * @type {number}
     * @memberof FinancialStatementeEntriesSubcategoryData
     */
    'outcome': number;
}
/**
 *
 * @export
 * @interface GenerateAndSendEmailVerificationCodeRequestDto
 */
export interface GenerateAndSendEmailVerificationCodeRequestDto {
    /**
     *
     * @type {string}
     * @memberof GenerateAndSendEmailVerificationCodeRequestDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof GenerateAndSendEmailVerificationCodeRequestDto
     */
    'purpose': GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum;
}
export declare const GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum: {
    readonly Up: "SIGN_UP";
    readonly In: "SIGN_IN";
};
export type GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum = typeof GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum[keyof typeof GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum];
/**
 *
 * @export
 * @interface GenerateAndSendPhoneVerificationCodeRequestDto
 */
export interface GenerateAndSendPhoneVerificationCodeRequestDto {
    /**
     *
     * @type {string}
     * @memberof GenerateAndSendPhoneVerificationCodeRequestDto
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof GenerateAndSendPhoneVerificationCodeRequestDto
     */
    'purpose': GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum;
}
export declare const GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum: {
    readonly Up: "SIGN_UP";
    readonly In: "SIGN_IN";
};
export type GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum = typeof GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum[keyof typeof GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum];
/**
 *
 * @export
 * @interface GenerateEmailInUseReportRequestDto
 */
export interface GenerateEmailInUseReportRequestDto {
    /**
     *
     * @type {string}
     * @memberof GenerateEmailInUseReportRequestDto
     */
    'email': string;
}
/**
 *
 * @export
 * @interface GeneratePhoneInUseReportRequestDto
 */
export interface GeneratePhoneInUseReportRequestDto {
    /**
     *
     * @type {string}
     * @memberof GeneratePhoneInUseReportRequestDto
     */
    'phone': string;
}
/**
 *
 * @export
 * @interface MeanResultEntity
 */
export interface MeanResultEntity {
    /**
     *
     * @type {number}
     * @memberof MeanResultEntity
     */
    'amountInCents'?: number;
    /**
     *
     * @type {Array<MeanResultSubcategoryItemEntity>}
     * @memberof MeanResultEntity
     */
    'subcategories'?: Array<MeanResultSubcategoryItemEntity>;
}
/**
 *
 * @export
 * @interface MeanResultSubcategoryItemEntity
 */
export interface MeanResultSubcategoryItemEntity {
    /**
     *
     * @type {string}
     * @memberof MeanResultSubcategoryItemEntity
     */
    'subcategoryId': string;
    /**
     *
     * @type {string}
     * @memberof MeanResultSubcategoryItemEntity
     */
    'subcategoryName': string;
    /**
     *
     * @type {number}
     * @memberof MeanResultSubcategoryItemEntity
     */
    'amountInCents'?: number;
}
/**
 *
 * @export
 * @interface MessageTokenEntity
 */
export interface MessageTokenEntity {
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {WorkspaceEntity}
     * @memberof MessageTokenEntity
     */
    'workspace': WorkspaceEntity;
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'userId': string;
    /**
     *
     * @type {UserEntity}
     * @memberof MessageTokenEntity
     */
    'user': UserEntity;
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'provider': MessageTokenEntityProviderEnum;
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'platform': MessageTokenEntityPlatformEnum;
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'deviceId': string;
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'token': string;
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof MessageTokenEntity
     */
    'updatedAt': string;
}
export declare const MessageTokenEntityProviderEnum: {
    readonly FirebaseMessaging: "FIREBASE_MESSAGING";
};
export type MessageTokenEntityProviderEnum = typeof MessageTokenEntityProviderEnum[keyof typeof MessageTokenEntityProviderEnum];
export declare const MessageTokenEntityPlatformEnum: {
    readonly Web: "WEB";
    readonly Android: "ANDROID";
    readonly Ios: "IOS";
};
export type MessageTokenEntityPlatformEnum = typeof MessageTokenEntityPlatformEnum[keyof typeof MessageTokenEntityPlatformEnum];
/**
 *
 * @export
 * @interface ParcialUpdateWorkspaceRequestDto
 */
export interface ParcialUpdateWorkspaceRequestDto {
    /**
     *
     * @type {string}
     * @memberof ParcialUpdateWorkspaceRequestDto
     */
    'name': string;
}
/**
 *
 * @export
 * @interface PartialUpdateProfileRequestDto
 */
export interface PartialUpdateProfileRequestDto {
    /**
     *
     * @type {string}
     * @memberof PartialUpdateProfileRequestDto
     */
    'fullName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PartialUpdateProfileRequestDto
     */
    'birthDate'?: string | null;
}
/**
 *
 * @export
 * @interface PaymentDataDto
 */
export interface PaymentDataDto {
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerName'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerBranchNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerAccountNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerRoutingNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerRoutingNumberISPB'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerDocumentNumberType'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'payerDocumentNumberValue'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'reason'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverName'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverBranchNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverAccountNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverRoutingNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverRoutingNumberISPB'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverDocumentNumberType'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverDocumentNumberValue'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'paymentMethod'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'referenceNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentDataDto
     */
    'receiverReferenceId'?: string;
}
/**
 *
 * @export
 * @interface PlainBankAccountEntity
 */
export interface PlainBankAccountEntity {
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'bankConnectionId': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'provider': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'providerAccountId': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'type': string;
    /**
     *
     * @type {boolean}
     * @memberof PlainBankAccountEntity
     */
    'enabled': boolean;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'number': string;
    /**
     *
     * @type {number}
     * @memberof PlainBankAccountEntity
     */
    'balance': number;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'currencyCode': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof PlainBankAccountEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface PluggyConnectTokenEntity
 */
export interface PluggyConnectTokenEntity {
    /**
     *
     * @type {string}
     * @memberof PluggyConnectTokenEntity
     */
    'accessToken': string;
}
/**
 *
 * @export
 * @interface ProfileEntity
 */
export interface ProfileEntity {
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'fullName': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'birthDate': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ProfileEntity
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface ProportionResultEntity
 */
export interface ProportionResultEntity {
    /**
     *
     * @type {number}
     * @memberof ProportionResultEntity
     */
    'ratio'?: number;
}
/**
 *
 * @export
 * @interface RefreshRequestDto
 */
export interface RefreshRequestDto {
    /**
     *
     * @type {string}
     * @memberof RefreshRequestDto
     */
    'clientId': string;
}
/**
 *
 * @export
 * @interface SignInWithEmailRequestDto
 */
export interface SignInWithEmailRequestDto {
    /**
     *
     * @type {string}
     * @memberof SignInWithEmailRequestDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof SignInWithEmailRequestDto
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof SignInWithEmailRequestDto
     */
    'clientId': string;
}
/**
 *
 * @export
 * @interface SignUpWithEmailRequestDto
 */
export interface SignUpWithEmailRequestDto {
    /**
     *
     * @type {string}
     * @memberof SignUpWithEmailRequestDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof SignUpWithEmailRequestDto
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof SignUpWithEmailRequestDto
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof SignUpWithEmailRequestDto
     */
    'emailVerificationCode': string;
    /**
     *
     * @type {string}
     * @memberof SignUpWithEmailRequestDto
     */
    'phoneVerificationCode': string;
}
/**
 *
 * @export
 * @interface UpdateBankTransactionRequestDto
 */
export interface UpdateBankTransactionRequestDto {
    /**
     *
     * @type {string}
     * @memberof UpdateBankTransactionRequestDto
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateBankTransactionRequestDto
     */
    'categoryId'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateBankTransactionRequestDto
     */
    'competencyDate'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateBankTransactionRequestDto
     */
    'ignore'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UpdateBankTransactionRequestDto
     */
    'confirm'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateBankTransactionRequestDto
     */
    'tagIds'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof UpdateBankTransactionRequestDto
     */
    'legalNature'?: string;
}
/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'passwordHash': string;
    /**
     *
     * @type {boolean}
     * @memberof UserEntity
     */
    'isRoot': boolean;
    /**
     *
     * @type {string}
     * @memberof UserEntity
     */
    'createdAt': string;
}
/**
 *
 * @export
 * @interface UserRelatedWorkspaceEntity
 */
export interface UserRelatedWorkspaceEntity {
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'prettyId': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'creatorUserId': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserRelatedWorkspaceEntity
     */
    'relationType': string;
}
/**
 *
 * @export
 * @interface VerifyEmailVerificationCodeRequestDto
 */
export interface VerifyEmailVerificationCodeRequestDto {
    /**
     *
     * @type {string}
     * @memberof VerifyEmailVerificationCodeRequestDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof VerifyEmailVerificationCodeRequestDto
     */
    'purpose': VerifyEmailVerificationCodeRequestDtoPurposeEnum;
    /**
     *
     * @type {string}
     * @memberof VerifyEmailVerificationCodeRequestDto
     */
    'code': string;
}
export declare const VerifyEmailVerificationCodeRequestDtoPurposeEnum: {
    readonly Up: "SIGN_UP";
    readonly In: "SIGN_IN";
};
export type VerifyEmailVerificationCodeRequestDtoPurposeEnum = typeof VerifyEmailVerificationCodeRequestDtoPurposeEnum[keyof typeof VerifyEmailVerificationCodeRequestDtoPurposeEnum];
/**
 *
 * @export
 * @interface VerifyPhoneVerificationCodeRequestDto
 */
export interface VerifyPhoneVerificationCodeRequestDto {
    /**
     *
     * @type {string}
     * @memberof VerifyPhoneVerificationCodeRequestDto
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof VerifyPhoneVerificationCodeRequestDto
     */
    'purpose': VerifyPhoneVerificationCodeRequestDtoPurposeEnum;
    /**
     *
     * @type {string}
     * @memberof VerifyPhoneVerificationCodeRequestDto
     */
    'code': string;
}
export declare const VerifyPhoneVerificationCodeRequestDtoPurposeEnum: {
    readonly Up: "SIGN_UP";
    readonly In: "SIGN_IN";
};
export type VerifyPhoneVerificationCodeRequestDtoPurposeEnum = typeof VerifyPhoneVerificationCodeRequestDtoPurposeEnum[keyof typeof VerifyPhoneVerificationCodeRequestDtoPurposeEnum];
/**
 *
 * @export
 * @interface WorkspaceCompanySettingsEntity
 */
export interface WorkspaceCompanySettingsEntity {
    /**
     *
     * @type {string}
     * @memberof WorkspaceCompanySettingsEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceCompanySettingsEntity
     */
    'businessSegment': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceCompanySettingsEntity
     */
    'otherBusinessDescription'?: string;
}
/**
 *
 * @export
 * @interface WorkspaceEntity
 */
export interface WorkspaceEntity {
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'prettyId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'creatorUserId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'selectedPersonalCategoryTreeId'?: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceEntity
     */
    'selectedBusinessCategoryTreeId'?: string;
    /**
     *
     * @type {WorkspaceHybridSettingsEntity}
     * @memberof WorkspaceEntity
     */
    'hybridSettings'?: WorkspaceHybridSettingsEntity;
    /**
     *
     * @type {WorkspaceCompanySettingsEntity}
     * @memberof WorkspaceEntity
     */
    'companySettings'?: WorkspaceCompanySettingsEntity;
    /**
     *
     * @type {WorkspacePersonalSettingsEntity}
     * @memberof WorkspaceEntity
     */
    'personalSettings'?: WorkspacePersonalSettingsEntity;
}
/**
 *
 * @export
 * @interface WorkspaceHybridSettingsEntity
 */
export interface WorkspaceHybridSettingsEntity {
    /**
     *
     * @type {string}
     * @memberof WorkspaceHybridSettingsEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceHybridSettingsEntity
     */
    'businessSegment': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceHybridSettingsEntity
     */
    'otherBusinessDescription'?: string;
}
/**
 *
 * @export
 * @interface WorkspaceJoinRequestEntity
 */
export interface WorkspaceJoinRequestEntity {
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'workspaceId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'userId': string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceJoinRequestEntity
     */
    'createdAt': string;
}
/**
 *
 * @export
 * @interface WorkspacePersonalSettingsEntity
 */
export interface WorkspacePersonalSettingsEntity {
    /**
     *
     * @type {string}
     * @memberof WorkspacePersonalSettingsEntity
     */
    'id': string;
}
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
export declare const BankAccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerActivateBankAccount: (bankAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateOrUpdateBankAccount: (workspaceId: string, createOrUpdateBankAccountRequestDto: CreateOrUpdateBankAccountRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport: (workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerDisableBankAccount: (bankAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchConnectionBankAccounts: (workspaceId: string, bankConnectionId: string, enabled: boolean, types: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchWorkspaceBankAccounts: (workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerGetBankAccountDetails: (bankAccountId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankAccountsApi - functional programming interface
 * @export
 */
export declare const BankAccountsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerActivateBankAccount(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateOrUpdateBankAccount(workspaceId: string, createOrUpdateBankAccountRequestDto: CreateOrUpdateBankAccountRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountsBalanceReportEntity>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerDisableBankAccount(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchConnectionBankAccounts(workspaceId: string, bankConnectionId: string, enabled: boolean, types: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountEntity>>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountEntity>>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerGetBankAccountDetails(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountEntity>>;
};
/**
 * BankAccountsApi - factory interface
 * @export
 */
export declare const BankAccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerActivateBankAccount(bankAccountId: string, options?: any): AxiosPromise<BankAccountEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateOrUpdateBankAccount(workspaceId: string, createOrUpdateBankAccountRequestDto: CreateOrUpdateBankAccountRequestDto, options?: any): AxiosPromise<BankAccountEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId: string, enabled?: boolean, types?: string, options?: any): AxiosPromise<BankAccountsBalanceReportEntity>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerDisableBankAccount(bankAccountId: string, options?: any): AxiosPromise<BankAccountEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchConnectionBankAccounts(workspaceId: string, bankConnectionId: string, enabled: boolean, types: string, options?: any): AxiosPromise<Array<BankAccountEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId: string, enabled?: boolean, types?: string, options?: any): AxiosPromise<Array<BankAccountEntity>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsControllerGetBankAccountDetails(bankAccountId: string, options?: any): AxiosPromise<BankAccountEntity>;
};
/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
export declare class BankAccountsApi extends BaseAPI {
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerActivateBankAccount(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerCreateOrUpdateBankAccount(workspaceId: string, createOrUpdateBankAccountRequestDto: CreateOrUpdateBankAccountRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountsBalanceReportEntity, any>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerDisableBankAccount(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerFetchConnectionBankAccounts(workspaceId: string, bankConnectionId: string, enabled: boolean, types: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity[], any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId: string, enabled?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity[], any>>;
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    bankAccountsControllerGetBankAccountDetails(bankAccountId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankAccountEntity, any>>;
}
/**
 * BankConnectionsApi - axios parameter creator
 * @export
 */
export declare const BankConnectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerActivateBankConnection: (bankConnectionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerCreateOrUpdateBankConnection: (workspaceId: string, createOrUpdateBankConnectionRequestDto: CreateOrUpdateBankConnectionRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerDisableBankConnection: (bankConnectionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerFetchUserBankConnections: (workspaceId: string, enabled?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerGetBankConnectionDetails: (bankConnectionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankConnectionsApi - functional programming interface
 * @export
 */
export declare const BankConnectionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerActivateBankConnection(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankConnectionEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId: string, createOrUpdateBankConnectionRequestDto: CreateOrUpdateBankConnectionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankConnectionEntity>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerDisableBankConnection(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankConnectionEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerFetchUserBankConnections(workspaceId: string, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankConnectionWithAccountsEntity>>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerGetBankConnectionDetails(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankConnectionWithAccountsEntity>>;
};
/**
 * BankConnectionsApi - factory interface
 * @export
 */
export declare const BankConnectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerActivateBankConnection(bankConnectionId: string, options?: any): AxiosPromise<BankConnectionEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId: string, createOrUpdateBankConnectionRequestDto: CreateOrUpdateBankConnectionRequestDto, options?: any): AxiosPromise<BankConnectionEntity>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerDisableBankConnection(bankConnectionId: string, options?: any): AxiosPromise<BankConnectionEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerFetchUserBankConnections(workspaceId: string, enabled?: boolean, options?: any): AxiosPromise<Array<BankConnectionWithAccountsEntity>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankConnectionsControllerGetBankConnectionDetails(bankConnectionId: string, options?: any): AxiosPromise<BankConnectionWithAccountsEntity>;
};
/**
 * BankConnectionsApi - object-oriented interface
 * @export
 * @class BankConnectionsApi
 * @extends {BaseAPI}
 */
export declare class BankConnectionsApi extends BaseAPI {
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerActivateBankConnection(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId: string, createOrUpdateBankConnectionRequestDto: CreateOrUpdateBankConnectionRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionEntity, any>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerDisableBankConnection(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerFetchUserBankConnections(workspaceId: string, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionWithAccountsEntity[], any>>;
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    bankConnectionsControllerGetBankConnectionDetails(bankConnectionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankConnectionWithAccountsEntity, any>>;
}
/**
 * BankTransactionCategoriesApi - axios parameter creator
 * @export
 */
export declare const BankTransactionCategoriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {string} [transactionNatures]
     * @param {string} [legalNatures]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCategoriesControllerGetBankTransactionCategories: (workspaceId: string, onlyLeafs?: boolean, transactionNatures?: string, legalNatures?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankTransactionCategoriesApi - functional programming interface
 * @export
 */
export declare const BankTransactionCategoriesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {string} [transactionNatures]
     * @param {string} [legalNatures]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId: string, onlyLeafs?: boolean, transactionNatures?: string, legalNatures?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionCategoryEntity>>>;
};
/**
 * BankTransactionCategoriesApi - factory interface
 * @export
 */
export declare const BankTransactionCategoriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {string} [transactionNatures]
     * @param {string} [legalNatures]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId: string, onlyLeafs?: boolean, transactionNatures?: string, legalNatures?: string, options?: any): AxiosPromise<Array<BankTransactionCategoryEntity>>;
};
/**
 * BankTransactionCategoriesApi - object-oriented interface
 * @export
 * @class BankTransactionCategoriesApi
 * @extends {BaseAPI}
 */
export declare class BankTransactionCategoriesApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {string} [transactionNatures]
     * @param {string} [legalNatures]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCategoriesApi
     */
    bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId: string, onlyLeafs?: boolean, transactionNatures?: string, legalNatures?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionCategoryEntity[], any>>;
}
/**
 * BankTransactionTagsApi - axios parameter creator
 * @export
 */
export declare const BankTransactionTagsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionTagsControllerCreateTag: (workspaceId: string, createBankTransactionTagRequestDto: CreateBankTransactionTagRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionTagsControllerListTags: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankTransactionTagsApi - functional programming interface
 * @export
 */
export declare const BankTransactionTagsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionTagsControllerCreateTag(workspaceId: string, createBankTransactionTagRequestDto: CreateBankTransactionTagRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionTagEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionTagsControllerListTags(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionTagEntity>>>;
};
/**
 * BankTransactionTagsApi - factory interface
 * @export
 */
export declare const BankTransactionTagsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionTagsControllerCreateTag(workspaceId: string, createBankTransactionTagRequestDto: CreateBankTransactionTagRequestDto, options?: any): AxiosPromise<BankTransactionTagEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionTagsControllerListTags(workspaceId: string, options?: any): AxiosPromise<Array<BankTransactionTagEntity>>;
};
/**
 * BankTransactionTagsApi - object-oriented interface
 * @export
 * @class BankTransactionTagsApi
 * @extends {BaseAPI}
 */
export declare class BankTransactionTagsApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionTagsApi
     */
    bankTransactionTagsControllerCreateTag(workspaceId: string, createBankTransactionTagRequestDto: CreateBankTransactionTagRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionTagEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionTagsApi
     */
    bankTransactionTagsControllerListTags(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionTagEntity[], any>>;
}
/**
 * BankTransactionsApi - axios parameter creator
 * @export
 */
export declare const BankTransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk: (createOrUpdateBankTransactionsInBulkRequestDto: CreateOrUpdateBankTransactionsInBulkRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} provider
     * @param {string} providerTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionByProvider: (workspaceId: string, provider: string, providerTransactionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [types]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactions: (workspaceId: string, pageIndex?: number, pageSize?: number, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, types?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, ignoreAutomaticApplicationRelated?: boolean, ignoreInternalTransfers?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe: (workspaceId: string, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsNotConfirmed: (workspaceId: string, pageIndex?: number, pageSize?: number, considerIgnored?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsTotals: (workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, ignoreAutomaticApplicationRelated?: boolean, ignoreInternalTransfers?: boolean, ignoreInvoiceRelated?: boolean, types?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetRecent: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetTransactionDetails: (bankTransactionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerUpdateTransaction: (bankTransactionId: string, updateBankTransactionRequestDto: UpdateBankTransactionRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BankTransactionsApi - functional programming interface
 * @export
 */
export declare const BankTransactionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto: CreateOrUpdateBankTransactionsInBulkRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionEntity>>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} provider
     * @param {string} providerTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionByProvider(workspaceId: string, provider: string, providerTransactionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [types]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactions(workspaceId: string, pageIndex?: number, pageSize?: number, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, types?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, ignoreAutomaticApplicationRelated?: boolean, ignoreInternalTransfers?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionsPageEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe(workspaceId: string, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionsPageEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId: string, pageIndex?: number, pageSize?: number, considerIgnored?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionsPageEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsTotals(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, ignoreAutomaticApplicationRelated?: boolean, ignoreInternalTransfers?: boolean, ignoreInvoiceRelated?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionsTotalsEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetRecent(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionEntity>>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetTransactionDetails(bankTransactionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionEntity>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerUpdateTransaction(bankTransactionId: string, updateBankTransactionRequestDto: UpdateBankTransactionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankTransactionEntity>>;
};
/**
 * BankTransactionsApi - factory interface
 * @export
 */
export declare const BankTransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto: CreateOrUpdateBankTransactionsInBulkRequestDto, options?: any): AxiosPromise<Array<BankTransactionEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} provider
     * @param {string} providerTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionByProvider(workspaceId: string, provider: string, providerTransactionId: string, options?: any): AxiosPromise<BankTransactionEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [types]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactions(workspaceId: string, pageIndex?: number, pageSize?: number, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, types?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, ignoreAutomaticApplicationRelated?: boolean, ignoreInternalTransfers?: boolean, ignoreInvoiceRelated?: boolean, options?: any): AxiosPromise<BankTransactionsPageEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe(workspaceId: string, pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<BankTransactionsPageEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId: string, pageIndex?: number, pageSize?: number, considerIgnored?: boolean, options?: any): AxiosPromise<BankTransactionsPageEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetBankTransactionsTotals(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, ignoreAutomaticApplicationRelated?: boolean, ignoreInternalTransfers?: boolean, ignoreInvoiceRelated?: boolean, types?: string, options?: any): AxiosPromise<BankTransactionsTotalsEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetRecent(workspaceId: string, options?: any): AxiosPromise<Array<BankTransactionEntity>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerGetTransactionDetails(bankTransactionId: string, options?: any): AxiosPromise<BankTransactionEntity>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankTransactionsControllerUpdateTransaction(bankTransactionId: string, updateBankTransactionRequestDto: UpdateBankTransactionRequestDto, options?: any): AxiosPromise<BankTransactionEntity>;
};
/**
 * BankTransactionsApi - object-oriented interface
 * @export
 * @class BankTransactionsApi
 * @extends {BaseAPI}
 */
export declare class BankTransactionsApi extends BaseAPI {
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto: CreateOrUpdateBankTransactionsInBulkRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity[], any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} provider
     * @param {string} providerTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetBankTransactionByProvider(workspaceId: string, provider: string, providerTransactionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [types]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetBankTransactions(workspaceId: string, pageIndex?: number, pageSize?: number, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, types?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, ignoreAutomaticApplicationRelated?: boolean, ignoreInternalTransfers?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionsPageEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe(workspaceId: string, pageIndex?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionsPageEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId: string, pageIndex?: number, pageSize?: number, considerIgnored?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionsPageEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetBankTransactionsTotals(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, showIgnored?: boolean, ignoreAutomaticApplicationRelated?: boolean, ignoreInternalTransfers?: boolean, ignoreInvoiceRelated?: boolean, types?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionsTotalsEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetRecent(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity[], any>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerGetTransactionDetails(bankTransactionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity, any>>;
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    bankTransactionsControllerUpdateTransaction(bankTransactionId: string, updateBankTransactionRequestDto: UpdateBankTransactionRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionEntity, any>>;
}
/**
 * IamAuthApi - axios parameter creator
 * @export
 */
export declare const IamAuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateAndSendEmailVerificationCode: (generateAndSendEmailVerificationCodeRequestDto: GenerateAndSendEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateAndSendPhoneVerificationCode: (generateAndSendPhoneVerificationCodeRequestDto: GenerateAndSendPhoneVerificationCodeRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateEmailInUseReport: (generateEmailInUseReportRequestDto: GenerateEmailInUseReportRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGeneratePhoneInUseReport: (generatePhoneInUseReportRequestDto: GeneratePhoneInUseReportRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerMe: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh: (refreshRequestDto: RefreshRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignInWithEmail: (signInWithEmailRequestDto: SignInWithEmailRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignUpWithEmail: (signUpWithEmailRequestDto: SignUpWithEmailRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyEmailVerificationCode: (verifyEmailVerificationCodeRequestDto: VerifyEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyPhoneVerificationCode: (verifyPhoneVerificationCodeRequestDto: VerifyPhoneVerificationCodeRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IamAuthApi - functional programming interface
 * @export
 */
export declare const IamAuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto: GenerateAndSendEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto: GenerateAndSendPhoneVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto: GenerateEmailInUseReportRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailInUseReportEntity>>;
    /**
     *
     * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto: GeneratePhoneInUseReportRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailInUseReportEntity>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>>;
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh(refreshRequestDto: RefreshRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsEntity>>;
    /**
     *
     * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignInWithEmail(signInWithEmailRequestDto: SignInWithEmailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsEntity>>;
    /**
     *
     * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignUpWithEmail(signUpWithEmailRequestDto: SignUpWithEmailRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>>;
    /**
     *
     * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto: VerifyEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto: VerifyPhoneVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * IamAuthApi - factory interface
 * @export
 */
export declare const IamAuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto: GenerateAndSendEmailVerificationCodeRequestDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto: GenerateAndSendPhoneVerificationCodeRequestDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto: GenerateEmailInUseReportRequestDto, options?: any): AxiosPromise<EmailInUseReportEntity>;
    /**
     *
     * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto: GeneratePhoneInUseReportRequestDto, options?: any): AxiosPromise<EmailInUseReportEntity>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerMe(options?: any): AxiosPromise<UserEntity>;
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerRefresh(refreshRequestDto: RefreshRequestDto, options?: any): AxiosPromise<CredentialsEntity>;
    /**
     *
     * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignInWithEmail(signInWithEmailRequestDto: SignInWithEmailRequestDto, options?: any): AxiosPromise<CredentialsEntity>;
    /**
     *
     * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignUpWithEmail(signUpWithEmailRequestDto: SignUpWithEmailRequestDto, options?: any): AxiosPromise<UserEntity>;
    /**
     *
     * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto: VerifyEmailVerificationCodeRequestDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto: VerifyPhoneVerificationCodeRequestDto, options?: any): AxiosPromise<void>;
};
/**
 * IamAuthApi - object-oriented interface
 * @export
 * @class IamAuthApi
 * @extends {BaseAPI}
 */
export declare class IamAuthApi extends BaseAPI {
    /**
     *
     * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto: GenerateAndSendEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto: GenerateAndSendPhoneVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto: GenerateEmailInUseReportRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailInUseReportEntity, any>>;
    /**
     *
     * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto: GeneratePhoneInUseReportRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailInUseReportEntity, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerMe(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserEntity, any>>;
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerRefresh(refreshRequestDto: RefreshRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CredentialsEntity, any>>;
    /**
     *
     * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerSignInWithEmail(signInWithEmailRequestDto: SignInWithEmailRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CredentialsEntity, any>>;
    /**
     *
     * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerSignUpWithEmail(signUpWithEmailRequestDto: SignUpWithEmailRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserEntity, any>>;
    /**
     *
     * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto: VerifyEmailVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto: VerifyPhoneVerificationCodeRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * IamProfilesApi - axios parameter creator
 * @export
 */
export declare const IamProfilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerCreate: (createProfileRequestDto: CreateProfileRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerGetMy: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerPartialUpdate: (partialUpdateProfileRequestDto: PartialUpdateProfileRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IamProfilesApi - functional programming interface
 * @export
 */
export declare const IamProfilesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerCreate(createProfileRequestDto: CreateProfileRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileEntity>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerGetMy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileEntity>>;
    /**
     *
     * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerPartialUpdate(partialUpdateProfileRequestDto: PartialUpdateProfileRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileEntity>>;
};
/**
 * IamProfilesApi - factory interface
 * @export
 */
export declare const IamProfilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerCreate(createProfileRequestDto: CreateProfileRequestDto, options?: any): AxiosPromise<ProfileEntity>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerGetMy(options?: any): AxiosPromise<ProfileEntity>;
    /**
     *
     * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    profilesControllerPartialUpdate(partialUpdateProfileRequestDto: PartialUpdateProfileRequestDto, options?: any): AxiosPromise<ProfileEntity>;
};
/**
 * IamProfilesApi - object-oriented interface
 * @export
 * @class IamProfilesApi
 * @extends {BaseAPI}
 */
export declare class IamProfilesApi extends BaseAPI {
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamProfilesApi
     */
    profilesControllerCreate(createProfileRequestDto: CreateProfileRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProfileEntity, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamProfilesApi
     */
    profilesControllerGetMy(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProfileEntity, any>>;
    /**
     *
     * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamProfilesApi
     */
    profilesControllerPartialUpdate(partialUpdateProfileRequestDto: PartialUpdateProfileRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProfileEntity, any>>;
}
/**
 * MessageTokensApi - axios parameter creator
 * @export
 */
export declare const MessageTokensApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageTokensControllerCreateOrUpdateMessageToken: (workspaceId: string, createOrUpdateMessageTokenRequestDto: CreateOrUpdateMessageTokenRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageTokensControllerGetWorkspaceMessageTokens: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MessageTokensApi - functional programming interface
 * @export
 */
export declare const MessageTokensApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageTokensControllerCreateOrUpdateMessageToken(workspaceId: string, createOrUpdateMessageTokenRequestDto: CreateOrUpdateMessageTokenRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTokenEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageTokensControllerGetWorkspaceMessageTokens(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageTokenEntity>>>;
};
/**
 * MessageTokensApi - factory interface
 * @export
 */
export declare const MessageTokensApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageTokensControllerCreateOrUpdateMessageToken(workspaceId: string, createOrUpdateMessageTokenRequestDto: CreateOrUpdateMessageTokenRequestDto, options?: any): AxiosPromise<MessageTokenEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messageTokensControllerGetWorkspaceMessageTokens(workspaceId: string, options?: any): AxiosPromise<Array<MessageTokenEntity>>;
};
/**
 * MessageTokensApi - object-oriented interface
 * @export
 * @class MessageTokensApi
 * @extends {BaseAPI}
 */
export declare class MessageTokensApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTokensApi
     */
    messageTokensControllerCreateOrUpdateMessageToken(workspaceId: string, createOrUpdateMessageTokenRequestDto: CreateOrUpdateMessageTokenRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageTokenEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTokensApi
     */
    messageTokensControllerGetWorkspaceMessageTokens(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageTokenEntity[], any>>;
}
/**
 * PluggyApi - axios parameter creator
 * @export
 */
export declare const PluggyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerCreate: (createPluggyConnectTokenRequestDto: CreatePluggyConnectTokenRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerWebhook: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PluggyApi - functional programming interface
 * @export
 */
export declare const PluggyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerCreate(createPluggyConnectTokenRequestDto: CreatePluggyConnectTokenRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluggyConnectTokenEntity>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerWebhook(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PluggyApi - factory interface
 * @export
 */
export declare const PluggyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerCreate(createPluggyConnectTokenRequestDto: CreatePluggyConnectTokenRequestDto, options?: any): AxiosPromise<PluggyConnectTokenEntity>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pluggyControllerWebhook(options?: any): AxiosPromise<void>;
};
/**
 * PluggyApi - object-oriented interface
 * @export
 * @class PluggyApi
 * @extends {BaseAPI}
 */
export declare class PluggyApi extends BaseAPI {
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    pluggyControllerCreate(createPluggyConnectTokenRequestDto: CreatePluggyConnectTokenRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PluggyConnectTokenEntity, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    pluggyControllerWebhook(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export declare const ReportsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsEntriesByCategoryReport: (workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsOutputsByCategoryReport: (workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetBusinessIndicators: (workspaceId: string, accountIds?: string, tagIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsCashFlowReport: (workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsOutputsByCategoryReport: (workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCashFlowReport: (workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetFinancialStatementReport: (workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ReportsApi - functional programming interface
 * @export
 */
export declare const ReportsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsEntriesByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowByCategoryReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsOutputsByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowByCategoryReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetBusinessIndicators(workspaceId: string, accountIds?: string, tagIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankTransactionIndicatorEntity>>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsOutputsByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowByCategoryReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowReportEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetFinancialStatementReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialStatementReport>>;
};
/**
 * ReportsApi - factory interface
 * @export
 */
export declare const ReportsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsEntriesByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: any): AxiosPromise<CashFlowByCategoryReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetAccountsOutputsByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: any): AxiosPromise<CashFlowByCategoryReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetBusinessIndicators(workspaceId: string, accountIds?: string, tagIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: any): AxiosPromise<Array<BankTransactionIndicatorEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInvoiceRelated?: boolean, options?: any): AxiosPromise<CashFlowReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCardsOutputsByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, ignoreInvoiceRelated?: boolean, options?: any): AxiosPromise<CashFlowByCategoryReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, options?: any): AxiosPromise<CashFlowReportEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsControllerGetFinancialStatementReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: any): AxiosPromise<FinancialStatementReport>;
};
/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export declare class ReportsApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetAccountsEntriesByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowByCategoryReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetAccountsOutputsByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowByCategoryReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetBusinessIndicators(workspaceId: string, accountIds?: string, tagIds?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BankTransactionIndicatorEntity[], any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetCardsCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetCardsOutputsByCategoryReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, ignoreInvoiceRelated?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowByCategoryReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetCashFlowReport(workspaceId: string, accountIds?: string, categoryIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, ignoreInternalTransfers?: boolean, ignoreAutomaticApplicationRelated?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CashFlowReportEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    reportsControllerGetFinancialStatementReport(workspaceId: string, accountIds?: string, tagIds?: string, legalNatures?: string, considerIgnored?: boolean, minPostedDate?: string, maxPostedDate?: string, minCompetencyDate?: string, maxCompetencyDate?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FinancialStatementReport, any>>;
}
/**
 * WorkspaceJoinRequestsApi - axios parameter creator
 * @export
 */
export declare const WorkspaceJoinRequestsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspaceJoinRequestsApi - functional programming interface
 * @export
 */
export declare const WorkspaceJoinRequestsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceJoinRequestEntity>>;
};
/**
 * WorkspaceJoinRequestsApi - factory interface
 * @export
 */
export declare const WorkspaceJoinRequestsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId: string, options?: any): AxiosPromise<WorkspaceJoinRequestEntity>;
};
/**
 * WorkspaceJoinRequestsApi - object-oriented interface
 * @export
 * @class WorkspaceJoinRequestsApi
 * @extends {BaseAPI}
 */
export declare class WorkspaceJoinRequestsApi extends BaseAPI {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceJoinRequestsApi
     */
    workspaceJoinRequestsControllerCreateNewPendingOrReturnCurrent(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceJoinRequestEntity, any>>;
}
/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
export declare const WorkspacesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerCreate: (createWorkspaceRequestDto: CreateWorkspaceRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerFetchUserRelatedWorkspaces: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerGet: (workspaceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerParcialUpdate: (workspaceId: string, parcialUpdateWorkspaceRequestDto: ParcialUpdateWorkspaceRequestDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
export declare const WorkspacesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerCreate(createWorkspaceRequestDto: CreateWorkspaceRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceEntity>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerFetchUserRelatedWorkspaces(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRelatedWorkspaceEntity>>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerParcialUpdate(workspaceId: string, parcialUpdateWorkspaceRequestDto: ParcialUpdateWorkspaceRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceEntity>>;
};
/**
 * WorkspacesApi - factory interface
 * @export
 */
export declare const WorkspacesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerCreate(createWorkspaceRequestDto: CreateWorkspaceRequestDto, options?: any): AxiosPromise<WorkspaceEntity>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerFetchUserRelatedWorkspaces(options?: any): AxiosPromise<Array<UserRelatedWorkspaceEntity>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerGet(workspaceId: string, options?: any): AxiosPromise<WorkspaceEntity>;
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspacesControllerParcialUpdate(workspaceId: string, parcialUpdateWorkspaceRequestDto: ParcialUpdateWorkspaceRequestDto, options?: any): AxiosPromise<WorkspaceEntity>;
};
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
export declare class WorkspacesApi extends BaseAPI {
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacesControllerCreate(createWorkspaceRequestDto: CreateWorkspaceRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceEntity, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacesControllerFetchUserRelatedWorkspaces(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserRelatedWorkspaceEntity[], any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacesControllerGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceEntity, any>>;
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    workspacesControllerParcialUpdate(workspaceId: string, parcialUpdateWorkspaceRequestDto: ParcialUpdateWorkspaceRequestDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkspaceEntity, any>>;
}
