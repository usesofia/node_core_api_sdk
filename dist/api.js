"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Api
 * Api principal do sistema Sofia.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageTokensApiFactory = exports.MessageTokensApiFp = exports.MessageTokensApiAxiosParamCreator = exports.IamWorkspacesApi = exports.IamWorkspacesApiFactory = exports.IamWorkspacesApiFp = exports.IamWorkspacesApiAxiosParamCreator = exports.IamProfilesApi = exports.IamProfilesApiFactory = exports.IamProfilesApiFp = exports.IamProfilesApiAxiosParamCreator = exports.IamAuthApi = exports.IamAuthApiFactory = exports.IamAuthApiFp = exports.IamAuthApiAxiosParamCreator = exports.BankTransactionsApi = exports.BankTransactionsApiFactory = exports.BankTransactionsApiFp = exports.BankTransactionsApiAxiosParamCreator = exports.BankTransactionTagsApi = exports.BankTransactionTagsApiFactory = exports.BankTransactionTagsApiFp = exports.BankTransactionTagsApiAxiosParamCreator = exports.BankTransactionCategoriesApi = exports.BankTransactionCategoriesApiFactory = exports.BankTransactionCategoriesApiFp = exports.BankTransactionCategoriesApiAxiosParamCreator = exports.BankConnectionsApi = exports.BankConnectionsApiFactory = exports.BankConnectionsApiFp = exports.BankConnectionsApiAxiosParamCreator = exports.BankAccountsApi = exports.BankAccountsApiFactory = exports.BankAccountsApiFp = exports.BankAccountsApiAxiosParamCreator = exports.WorkspaceEntityTypeEnum = exports.VerifyPhoneVerificationCodeRequestDtoPurposeEnum = exports.VerifyEmailVerificationCodeRequestDtoPurposeEnum = exports.UserEntityWorkspacesInnerHybridSettingsBusinessSegmentEnum = exports.UserEntityWorkspacesInnerTypeEnum = exports.MessageTokenEntityPlatformEnum = exports.MessageTokenEntityProviderEnum = exports.GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum = exports.GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum = exports.CreateWorkspaceRequestDtoBusinessSegmentEnum = exports.CreateWorkspaceRequestDtoTypeEnum = exports.BankTransactionEntityLegalNatureEnum = exports.BankTransactionEntityStatusEnum = exports.BankTransactionEntityTypeEnum = exports.BankTransactionEntityProviderEnum = void 0;
exports.ReportsApi = exports.ReportsApiFactory = exports.ReportsApiFp = exports.ReportsApiAxiosParamCreator = exports.PluggyApi = exports.PluggyApiFactory = exports.PluggyApiFp = exports.PluggyApiAxiosParamCreator = exports.MessageTokensApi = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.BankTransactionEntityProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankTransactionEntityTypeEnum = {
    Debit: 'DEBIT',
    Credit: 'CREDIT',
    Undefined: 'UNDEFINED'
};
exports.BankTransactionEntityStatusEnum = {
    Pending: 'PENDING',
    Posted: 'POSTED'
};
exports.BankTransactionEntityLegalNatureEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS'
};
exports.CreateWorkspaceRequestDtoTypeEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Hybrid: 'HYBRID'
};
exports.CreateWorkspaceRequestDtoBusinessSegmentEnum = {
    Attorney: 'ATTORNEY',
    Architect: 'ARCHITECT',
    Consultant: 'CONSULTANT',
    Realtor: 'REALTOR',
    InsuranceBroker: 'INSURANCE_BROKER',
    Dentist: 'DENTIST',
    Physiotherapist: 'PHYSIOTHERAPIST',
    Physician: 'PHYSICIAN',
    Tutor: 'TUTOR',
    Psychologist: 'PSYCHOLOGIST',
    Other: 'OTHER'
};
exports.GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum = {
    Up: 'SIGN_UP',
    In: 'SIGN_IN'
};
exports.GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum = {
    Up: 'SIGN_UP',
    In: 'SIGN_IN'
};
exports.MessageTokenEntityProviderEnum = {
    FirebaseMessaging: 'FIREBASE_MESSAGING'
};
exports.MessageTokenEntityPlatformEnum = {
    Web: 'WEB',
    Android: 'ANDROID',
    Ios: 'IOS'
};
exports.UserEntityWorkspacesInnerTypeEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Hybrid: 'HYBRID'
};
exports.UserEntityWorkspacesInnerHybridSettingsBusinessSegmentEnum = {
    Attorney: 'ATTORNEY',
    Architect: 'ARCHITECT',
    Consultant: 'CONSULTANT',
    Realtor: 'REALTOR',
    InsuranceBroker: 'INSURANCE_BROKER',
    Dentist: 'DENTIST',
    Physiotherapist: 'PHYSIOTHERAPIST',
    Physician: 'PHYSICIAN',
    Tutor: 'TUTOR',
    Psychologist: 'PSYCHOLOGIST',
    Other: 'OTHER'
};
exports.VerifyEmailVerificationCodeRequestDtoPurposeEnum = {
    Up: 'SIGN_UP',
    In: 'SIGN_IN'
};
exports.VerifyPhoneVerificationCodeRequestDtoPurposeEnum = {
    Up: 'SIGN_UP',
    In: 'SIGN_IN'
};
exports.WorkspaceEntityTypeEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Hybrid: 'HYBRID'
};
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
var BankAccountsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivateBankAccount: function (bankAccountId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankAccountId_1], args_1, true), void 0, function (bankAccountId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerActivateBankAccount', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}/activate"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdateBankAccount: function (workspaceId_1, createOrUpdateBankAccountRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, createOrUpdateBankAccountRequestDto_1], args_1, true), void 0, function (workspaceId, createOrUpdateBankAccountRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerCreateOrUpdateBankAccount', 'workspaceId', workspaceId);
                    // verify required parameter 'createOrUpdateBankAccountRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerCreateOrUpdateBankAccount', 'createOrUpdateBankAccountRequestDto', createOrUpdateBankAccountRequestDto);
                    localVarPath = "/workspaces/{workspaceId}/bank/accounts"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankAccountRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport: function (workspaceId_1, enabled_1, types_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, enabled_1, types_1], args_1, true), void 0, function (workspaceId, enabled, types, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/accounts/balance-report"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisableBankAccount: function (bankAccountId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankAccountId_1], args_1, true), void 0, function (bankAccountId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerDisableBankAccount', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}/disable"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} bankConnectionId
         * @param {boolean} enabled
         * @param {string} types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchConnectionBankAccounts: function (workspaceId_1, bankConnectionId_1, enabled_1, types_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, bankConnectionId_1, enabled_1, types_1], args_1, true), void 0, function (workspaceId, bankConnectionId, enabled, types, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchConnectionBankAccounts', 'workspaceId', workspaceId);
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchConnectionBankAccounts', 'bankConnectionId', bankConnectionId);
                    // verify required parameter 'enabled' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchConnectionBankAccounts', 'enabled', enabled);
                    // verify required parameter 'types' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchConnectionBankAccounts', 'types', types);
                    localVarPath = "/workspaces/{workspaceId}/bank/connections/{bankConnectionId}/accounts"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)))
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchWorkspaceBankAccounts: function (workspaceId_1, enabled_1, types_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, enabled_1, types_1], args_1, true), void 0, function (workspaceId, enabled, types, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerFetchWorkspaceBankAccounts', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/accounts"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetBankAccountDetails: function (bankAccountId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankAccountId_1], args_1, true), void 0, function (bankAccountId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerGetBankAccountDetails', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankAccountsApiAxiosParamCreator = BankAccountsApiAxiosParamCreator;
/**
 * BankAccountsApi - functional programming interface
 * @export
 */
var BankAccountsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankAccountsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivateBankAccount: function (bankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerActivateBankAccount(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerActivateBankAccount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdateBankAccount: function (workspaceId, createOrUpdateBankAccountRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerCreateOrUpdateBankAccount(workspaceId, createOrUpdateBankAccountRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerCreateOrUpdateBankAccount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport: function (workspaceId, enabled, types, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisableBankAccount: function (bankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerDisableBankAccount(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerDisableBankAccount']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} bankConnectionId
         * @param {boolean} enabled
         * @param {string} types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchConnectionBankAccounts: function (workspaceId, bankConnectionId, enabled, types, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerFetchConnectionBankAccounts(workspaceId, bankConnectionId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerFetchConnectionBankAccounts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchWorkspaceBankAccounts: function (workspaceId, enabled, types, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerFetchWorkspaceBankAccounts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetBankAccountDetails: function (bankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerGetBankAccountDetails(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerGetBankAccountDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankAccountsApiFp = BankAccountsApiFp;
/**
 * BankAccountsApi - factory interface
 * @export
 */
var BankAccountsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankAccountsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivateBankAccount: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerActivateBankAccount(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdateBankAccount: function (workspaceId, createOrUpdateBankAccountRequestDto, options) {
            return localVarFp.bankAccountsControllerCreateOrUpdateBankAccount(workspaceId, createOrUpdateBankAccountRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport: function (workspaceId, enabled, types, options) {
            return localVarFp.bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisableBankAccount: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerDisableBankAccount(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} bankConnectionId
         * @param {boolean} enabled
         * @param {string} types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchConnectionBankAccounts: function (workspaceId, bankConnectionId, enabled, types, options) {
            return localVarFp.bankAccountsControllerFetchConnectionBankAccounts(workspaceId, bankConnectionId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerFetchWorkspaceBankAccounts: function (workspaceId, enabled, types, options) {
            return localVarFp.bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetBankAccountDetails: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerGetBankAccountDetails(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankAccountsApiFactory = BankAccountsApiFactory;
/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
var BankAccountsApi = /** @class */ (function (_super) {
    __extends(BankAccountsApi, _super);
    function BankAccountsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerActivateBankAccount = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerActivateBankAccount(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerCreateOrUpdateBankAccount = function (workspaceId, createOrUpdateBankAccountRequestDto, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerCreateOrUpdateBankAccount(workspaceId, createOrUpdateBankAccountRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport = function (workspaceId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerCreateWorkspaceBankAccountsBalanceReport(workspaceId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerDisableBankAccount = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerDisableBankAccount(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} bankConnectionId
     * @param {boolean} enabled
     * @param {string} types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerFetchConnectionBankAccounts = function (workspaceId, bankConnectionId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerFetchConnectionBankAccounts(workspaceId, bankConnectionId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerFetchWorkspaceBankAccounts = function (workspaceId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerFetchWorkspaceBankAccounts(workspaceId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerGetBankAccountDetails = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerGetBankAccountDetails(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankAccountsApi;
}(base_1.BaseAPI));
exports.BankAccountsApi = BankAccountsApi;
/**
 * BankConnectionsApi - axios parameter creator
 * @export
 */
var BankConnectionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivateBankConnection: function (bankConnectionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankConnectionId_1], args_1, true), void 0, function (bankConnectionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerActivateBankConnection', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}/activate"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdateBankConnection: function (workspaceId_1, createOrUpdateBankConnectionRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, createOrUpdateBankConnectionRequestDto_1], args_1, true), void 0, function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerCreateOrUpdateBankConnection', 'workspaceId', workspaceId);
                    // verify required parameter 'createOrUpdateBankConnectionRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerCreateOrUpdateBankConnection', 'createOrUpdateBankConnectionRequestDto', createOrUpdateBankConnectionRequestDto);
                    localVarPath = "/workspaces/{workspaceId}/bank/connections"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankConnectionRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisableBankConnection: function (bankConnectionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankConnectionId_1], args_1, true), void 0, function (bankConnectionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerDisableBankConnection', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}/disable"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerFetchUserBankConnections: function (workspaceId_1, enabled_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, enabled_1], args_1, true), void 0, function (workspaceId, enabled, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerFetchUserBankConnections', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/connections"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetBankConnectionDetails: function (bankConnectionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankConnectionId_1], args_1, true), void 0, function (bankConnectionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerGetBankConnectionDetails', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankConnectionsApiAxiosParamCreator = BankConnectionsApiAxiosParamCreator;
/**
 * BankConnectionsApi - functional programming interface
 * @export
 */
var BankConnectionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankConnectionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivateBankConnection: function (bankConnectionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerActivateBankConnection(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerActivateBankConnection']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdateBankConnection: function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId, createOrUpdateBankConnectionRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerCreateOrUpdateBankConnection']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisableBankConnection: function (bankConnectionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerDisableBankConnection(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerDisableBankConnection']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerFetchUserBankConnections: function (workspaceId, enabled, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerFetchUserBankConnections(workspaceId, enabled, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerFetchUserBankConnections']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetBankConnectionDetails: function (bankConnectionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerGetBankConnectionDetails(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerGetBankConnectionDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankConnectionsApiFp = BankConnectionsApiFp;
/**
 * BankConnectionsApi - factory interface
 * @export
 */
var BankConnectionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankConnectionsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivateBankConnection: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerActivateBankConnection(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdateBankConnection: function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
            return localVarFp.bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId, createOrUpdateBankConnectionRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisableBankConnection: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerDisableBankConnection(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerFetchUserBankConnections: function (workspaceId, enabled, options) {
            return localVarFp.bankConnectionsControllerFetchUserBankConnections(workspaceId, enabled, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetBankConnectionDetails: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerGetBankConnectionDetails(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankConnectionsApiFactory = BankConnectionsApiFactory;
/**
 * BankConnectionsApi - object-oriented interface
 * @export
 * @class BankConnectionsApi
 * @extends {BaseAPI}
 */
var BankConnectionsApi = /** @class */ (function (_super) {
    __extends(BankConnectionsApi, _super);
    function BankConnectionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerActivateBankConnection = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerActivateBankConnection(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerCreateOrUpdateBankConnection = function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerCreateOrUpdateBankConnection(workspaceId, createOrUpdateBankConnectionRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerDisableBankConnection = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerDisableBankConnection(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerFetchUserBankConnections = function (workspaceId, enabled, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerFetchUserBankConnections(workspaceId, enabled, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerGetBankConnectionDetails = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerGetBankConnectionDetails(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankConnectionsApi;
}(base_1.BaseAPI));
exports.BankConnectionsApi = BankConnectionsApi;
/**
 * BankTransactionCategoriesApi - axios parameter creator
 * @export
 */
var BankTransactionCategoriesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {string} [transactionNatures]
         * @param {string} [legalNatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerGetBankTransactionCategories: function (workspaceId_1, onlyLeafs_1, transactionNatures_1, legalNatures_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, onlyLeafs_1, transactionNatures_1, legalNatures_1], args_1, true), void 0, function (workspaceId, onlyLeafs, transactionNatures, legalNatures, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionCategoriesControllerGetBankTransactionCategories', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/categories"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (onlyLeafs !== undefined) {
                        localVarQueryParameter['onlyLeafs'] = onlyLeafs;
                    }
                    if (transactionNatures !== undefined) {
                        localVarQueryParameter['transactionNatures'] = transactionNatures;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionCategoriesApiAxiosParamCreator = BankTransactionCategoriesApiAxiosParamCreator;
/**
 * BankTransactionCategoriesApi - functional programming interface
 * @export
 */
var BankTransactionCategoriesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionCategoriesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {string} [transactionNatures]
         * @param {string} [legalNatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerGetBankTransactionCategories: function (workspaceId, onlyLeafs, transactionNatures, legalNatures, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId, onlyLeafs, transactionNatures, legalNatures, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionCategoriesApi.bankTransactionCategoriesControllerGetBankTransactionCategories']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionCategoriesApiFp = BankTransactionCategoriesApiFp;
/**
 * BankTransactionCategoriesApi - factory interface
 * @export
 */
var BankTransactionCategoriesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionCategoriesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {string} [transactionNatures]
         * @param {string} [legalNatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerGetBankTransactionCategories: function (workspaceId, onlyLeafs, transactionNatures, legalNatures, options) {
            return localVarFp.bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId, onlyLeafs, transactionNatures, legalNatures, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionCategoriesApiFactory = BankTransactionCategoriesApiFactory;
/**
 * BankTransactionCategoriesApi - object-oriented interface
 * @export
 * @class BankTransactionCategoriesApi
 * @extends {BaseAPI}
 */
var BankTransactionCategoriesApi = /** @class */ (function (_super) {
    __extends(BankTransactionCategoriesApi, _super);
    function BankTransactionCategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {string} [transactionNatures]
     * @param {string} [legalNatures]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCategoriesApi
     */
    BankTransactionCategoriesApi.prototype.bankTransactionCategoriesControllerGetBankTransactionCategories = function (workspaceId, onlyLeafs, transactionNatures, legalNatures, options) {
        var _this = this;
        return (0, exports.BankTransactionCategoriesApiFp)(this.configuration).bankTransactionCategoriesControllerGetBankTransactionCategories(workspaceId, onlyLeafs, transactionNatures, legalNatures, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionCategoriesApi;
}(base_1.BaseAPI));
exports.BankTransactionCategoriesApi = BankTransactionCategoriesApi;
/**
 * BankTransactionTagsApi - axios parameter creator
 * @export
 */
var BankTransactionTagsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerCreateTag: function (workspaceId_1, createBankTransactionTagRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, createBankTransactionTagRequestDto_1], args_1, true), void 0, function (workspaceId, createBankTransactionTagRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionTagsControllerCreateTag', 'workspaceId', workspaceId);
                    // verify required parameter 'createBankTransactionTagRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionTagsControllerCreateTag', 'createBankTransactionTagRequestDto', createBankTransactionTagRequestDto);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/tags"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createBankTransactionTagRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerListTags: function (workspaceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1], args_1, true), void 0, function (workspaceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionTagsControllerListTags', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/tags"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionTagsApiAxiosParamCreator = BankTransactionTagsApiAxiosParamCreator;
/**
 * BankTransactionTagsApi - functional programming interface
 * @export
 */
var BankTransactionTagsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionTagsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerCreateTag: function (workspaceId, createBankTransactionTagRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionTagsControllerCreateTag(workspaceId, createBankTransactionTagRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionTagsApi.bankTransactionTagsControllerCreateTag']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerListTags: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionTagsControllerListTags(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionTagsApi.bankTransactionTagsControllerListTags']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionTagsApiFp = BankTransactionTagsApiFp;
/**
 * BankTransactionTagsApi - factory interface
 * @export
 */
var BankTransactionTagsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionTagsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerCreateTag: function (workspaceId, createBankTransactionTagRequestDto, options) {
            return localVarFp.bankTransactionTagsControllerCreateTag(workspaceId, createBankTransactionTagRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerListTags: function (workspaceId, options) {
            return localVarFp.bankTransactionTagsControllerListTags(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionTagsApiFactory = BankTransactionTagsApiFactory;
/**
 * BankTransactionTagsApi - object-oriented interface
 * @export
 * @class BankTransactionTagsApi
 * @extends {BaseAPI}
 */
var BankTransactionTagsApi = /** @class */ (function (_super) {
    __extends(BankTransactionTagsApi, _super);
    function BankTransactionTagsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionTagsApi
     */
    BankTransactionTagsApi.prototype.bankTransactionTagsControllerCreateTag = function (workspaceId, createBankTransactionTagRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionTagsApiFp)(this.configuration).bankTransactionTagsControllerCreateTag(workspaceId, createBankTransactionTagRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionTagsApi
     */
    BankTransactionTagsApi.prototype.bankTransactionTagsControllerListTags = function (workspaceId, options) {
        var _this = this;
        return (0, exports.BankTransactionTagsApiFp)(this.configuration).bankTransactionTagsControllerListTags(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionTagsApi;
}(base_1.BaseAPI));
exports.BankTransactionTagsApi = BankTransactionTagsApi;
/**
 * BankTransactionsApi - axios parameter creator
 * @export
 */
var BankTransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createOrUpdateBankTransactionsInBulkRequestDto_1], args_1, true), void 0, function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createOrUpdateBankTransactionsInBulkRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk', 'createOrUpdateBankTransactionsInBulkRequestDto', createOrUpdateBankTransactionsInBulkRequestDto);
                    localVarPath = "/bank/transactions/bulk";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankTransactionsInBulkRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} provider
         * @param {string} providerTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionByProvider: function (workspaceId_1, provider_1, providerTransactionId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, provider_1, providerTransactionId_1], args_1, true), void 0, function (workspaceId, provider, providerTransactionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactionByProvider', 'workspaceId', workspaceId);
                    // verify required parameter 'provider' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactionByProvider', 'provider', provider);
                    // verify required parameter 'providerTransactionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactionByProvider', 'providerTransactionId', providerTransactionId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/by-provider"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (provider !== undefined) {
                        localVarQueryParameter['provider'] = provider;
                    }
                    if (providerTransactionId !== undefined) {
                        localVarQueryParameter['providerTransactionId'] = providerTransactionId;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [types]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactions: function (workspaceId_1, pageIndex_1, pageSize_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, types_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1, showIgnored_1, ignoreAutomaticApplicationRelated_1, ignoreInternalTransfers_1, ignoreInvoiceRelated_1) {
            var args_1 = [];
            for (var _i = 16; _i < arguments.length; _i++) {
                args_1[_i - 16] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, pageIndex_1, pageSize_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, types_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1, showIgnored_1, ignoreAutomaticApplicationRelated_1, ignoreInternalTransfers_1, ignoreInvoiceRelated_1], args_1, true), void 0, function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, types, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactions', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (pageIndex !== undefined) {
                        localVarQueryParameter['pageIndex'] = pageIndex;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    if (showIgnored !== undefined) {
                        localVarQueryParameter['showIgnored'] = showIgnored;
                    }
                    if (ignoreAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['ignoreAutomaticApplicationRelated'] = ignoreAutomaticApplicationRelated;
                    }
                    if (ignoreInternalTransfers !== undefined) {
                        localVarQueryParameter['ignoreInternalTransfers'] = ignoreInternalTransfers;
                    }
                    if (ignoreInvoiceRelated !== undefined) {
                        localVarQueryParameter['ignoreInvoiceRelated'] = ignoreInvoiceRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe: function (workspaceId_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (workspaceId, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/confirmed-today-by-me"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (pageIndex !== undefined) {
                        localVarQueryParameter['pageIndex'] = pageIndex;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {boolean} [considerIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsNotConfirmed: function (workspaceId_1, pageIndex_1, pageSize_1, considerIgnored_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, pageIndex_1, pageSize_1, considerIgnored_1], args_1, true), void 0, function (workspaceId, pageIndex, pageSize, considerIgnored, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactionsNotConfirmed', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/not-confirmed"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (pageIndex !== undefined) {
                        localVarQueryParameter['pageIndex'] = pageIndex;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsTotals: function (workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1, showIgnored_1, ignoreAutomaticApplicationRelated_1, ignoreInternalTransfers_1, ignoreInvoiceRelated_1, types_1) {
            var args_1 = [];
            for (var _i = 14; _i < arguments.length; _i++) {
                args_1[_i - 14] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1, showIgnored_1, ignoreAutomaticApplicationRelated_1, ignoreInternalTransfers_1, ignoreInvoiceRelated_1, types_1], args_1, true), void 0, function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, types, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetBankTransactionsTotals', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/totals"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    if (showIgnored !== undefined) {
                        localVarQueryParameter['showIgnored'] = showIgnored;
                    }
                    if (ignoreAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['ignoreAutomaticApplicationRelated'] = ignoreAutomaticApplicationRelated;
                    }
                    if (ignoreInternalTransfers !== undefined) {
                        localVarQueryParameter['ignoreInternalTransfers'] = ignoreInternalTransfers;
                    }
                    if (ignoreInvoiceRelated !== undefined) {
                        localVarQueryParameter['ignoreInvoiceRelated'] = ignoreInvoiceRelated;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetRecent: function (workspaceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1], args_1, true), void 0, function (workspaceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetRecent', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/bank/transactions/most-recent"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTransactionDetails: function (bankTransactionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankTransactionId_1], args_1, true), void 0, function (bankTransactionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankTransactionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetTransactionDetails', 'bankTransactionId', bankTransactionId);
                    localVarPath = "/bank/transactions/{bankTransactionId}"
                        .replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(bankTransactionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerUpdateTransaction: function (bankTransactionId_1, updateBankTransactionRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankTransactionId_1, updateBankTransactionRequestDto_1], args_1, true), void 0, function (bankTransactionId, updateBankTransactionRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankTransactionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerUpdateTransaction', 'bankTransactionId', bankTransactionId);
                    // verify required parameter 'updateBankTransactionRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerUpdateTransaction', 'updateBankTransactionRequestDto', updateBankTransactionRequestDto);
                    localVarPath = "/bank/transactions/{bankTransactionId}"
                        .replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(bankTransactionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateBankTransactionRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionsApiAxiosParamCreator = BankTransactionsApiAxiosParamCreator;
/**
 * BankTransactionsApi - functional programming interface
 * @export
 */
var BankTransactionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} provider
         * @param {string} providerTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionByProvider: function (workspaceId, provider, providerTransactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetBankTransactionByProvider(workspaceId, provider, providerTransactionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetBankTransactionByProvider']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [types]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactions: function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, types, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetBankTransactions(workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, types, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetBankTransactions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe: function (workspaceId, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe(workspaceId, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {boolean} [considerIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsNotConfirmed: function (workspaceId, pageIndex, pageSize, considerIgnored, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId, pageIndex, pageSize, considerIgnored, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetBankTransactionsNotConfirmed']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsTotals: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, types, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetBankTransactionsTotals(workspaceId, accountIds, categoryIds, tagIds, legalNatures, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetBankTransactionsTotals']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetRecent: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetRecent(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetRecent']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTransactionDetails: function (bankTransactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetTransactionDetails(bankTransactionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetTransactionDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerUpdateTransaction: function (bankTransactionId, updateBankTransactionRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerUpdateTransaction(bankTransactionId, updateBankTransactionRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerUpdateTransaction']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionsApiFp = BankTransactionsApiFp;
/**
 * BankTransactionsApi - factory interface
 * @export
 */
var BankTransactionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionsApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
            return localVarFp.bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} provider
         * @param {string} providerTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionByProvider: function (workspaceId, provider, providerTransactionId, options) {
            return localVarFp.bankTransactionsControllerGetBankTransactionByProvider(workspaceId, provider, providerTransactionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [types]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactions: function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, types, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, options) {
            return localVarFp.bankTransactionsControllerGetBankTransactions(workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, types, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe: function (workspaceId, pageIndex, pageSize, options) {
            return localVarFp.bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe(workspaceId, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {boolean} [considerIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsNotConfirmed: function (workspaceId, pageIndex, pageSize, considerIgnored, options) {
            return localVarFp.bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId, pageIndex, pageSize, considerIgnored, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [showIgnored]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetBankTransactionsTotals: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, types, options) {
            return localVarFp.bankTransactionsControllerGetBankTransactionsTotals(workspaceId, accountIds, categoryIds, tagIds, legalNatures, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetRecent: function (workspaceId, options) {
            return localVarFp.bankTransactionsControllerGetRecent(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTransactionDetails: function (bankTransactionId, options) {
            return localVarFp.bankTransactionsControllerGetTransactionDetails(bankTransactionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerUpdateTransaction: function (bankTransactionId, updateBankTransactionRequestDto, options) {
            return localVarFp.bankTransactionsControllerUpdateTransaction(bankTransactionId, updateBankTransactionRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionsApiFactory = BankTransactionsApiFactory;
/**
 * BankTransactionsApi - object-oriented interface
 * @export
 * @class BankTransactionsApi
 * @extends {BaseAPI}
 */
var BankTransactionsApi = /** @class */ (function (_super) {
    __extends(BankTransactionsApi, _super);
    function BankTransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk = function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerCreateOrUpdateBankTransactionsInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} provider
     * @param {string} providerTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetBankTransactionByProvider = function (workspaceId, provider, providerTransactionId, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetBankTransactionByProvider(workspaceId, provider, providerTransactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [types]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetBankTransactions = function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, types, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetBankTransactions(workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, types, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe = function (workspaceId, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetBankTransactionsConfirmedTodayByMe(workspaceId, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetBankTransactionsNotConfirmed = function (workspaceId, pageIndex, pageSize, considerIgnored, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetBankTransactionsNotConfirmed(workspaceId, pageIndex, pageSize, considerIgnored, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [showIgnored]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetBankTransactionsTotals = function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, types, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetBankTransactionsTotals(workspaceId, accountIds, categoryIds, tagIds, legalNatures, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, showIgnored, ignoreAutomaticApplicationRelated, ignoreInternalTransfers, ignoreInvoiceRelated, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetRecent = function (workspaceId, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetRecent(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetTransactionDetails = function (bankTransactionId, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetTransactionDetails(bankTransactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankTransactionId
     * @param {UpdateBankTransactionRequestDto} updateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerUpdateTransaction = function (bankTransactionId, updateBankTransactionRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerUpdateTransaction(bankTransactionId, updateBankTransactionRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionsApi;
}(base_1.BaseAPI));
exports.BankTransactionsApi = BankTransactionsApi;
/**
 * IamAuthApi - axios parameter creator
 * @export
 */
var IamAuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendEmailVerificationCode: function (generateAndSendEmailVerificationCodeRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([generateAndSendEmailVerificationCodeRequestDto_1], args_1, true), void 0, function (generateAndSendEmailVerificationCodeRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'generateAndSendEmailVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerGenerateAndSendEmailVerificationCode', 'generateAndSendEmailVerificationCodeRequestDto', generateAndSendEmailVerificationCodeRequestDto);
                    localVarPath = "/iam/auth/email-verification-code";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateAndSendEmailVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendPhoneVerificationCode: function (generateAndSendPhoneVerificationCodeRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([generateAndSendPhoneVerificationCodeRequestDto_1], args_1, true), void 0, function (generateAndSendPhoneVerificationCodeRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'generateAndSendPhoneVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerGenerateAndSendPhoneVerificationCode', 'generateAndSendPhoneVerificationCodeRequestDto', generateAndSendPhoneVerificationCodeRequestDto);
                    localVarPath = "/iam/auth/phone-verification-code";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateAndSendPhoneVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateEmailInUseReport: function (generateEmailInUseReportRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([generateEmailInUseReportRequestDto_1], args_1, true), void 0, function (generateEmailInUseReportRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'generateEmailInUseReportRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerGenerateEmailInUseReport', 'generateEmailInUseReportRequestDto', generateEmailInUseReportRequestDto);
                    localVarPath = "/iam/auth/email-in-use";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateEmailInUseReportRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGeneratePhoneInUseReport: function (generatePhoneInUseReportRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([generatePhoneInUseReportRequestDto_1], args_1, true), void 0, function (generatePhoneInUseReportRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'generatePhoneInUseReportRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerGeneratePhoneInUseReport', 'generatePhoneInUseReportRequestDto', generatePhoneInUseReportRequestDto);
                    localVarPath = "/iam/auth/phone-in-use";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generatePhoneInUseReportRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/iam/auth/me";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([refreshRequestDto_1], args_1, true), void 0, function (refreshRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'refreshRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerRefresh', 'refreshRequestDto', refreshRequestDto);
                    localVarPath = "/iam/auth/refresh";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(refreshRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmail: function (signInWithEmailRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([signInWithEmailRequestDto_1], args_1, true), void 0, function (signInWithEmailRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'signInWithEmailRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerSignInWithEmail', 'signInWithEmailRequestDto', signInWithEmailRequestDto);
                    localVarPath = "/iam/auth/sign-in/email";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signInWithEmailRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmail: function (signUpWithEmailRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([signUpWithEmailRequestDto_1], args_1, true), void 0, function (signUpWithEmailRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'signUpWithEmailRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerSignUpWithEmail', 'signUpWithEmailRequestDto', signUpWithEmailRequestDto);
                    localVarPath = "/iam/auth/sign-up/email";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signUpWithEmailRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyEmailVerificationCode: function (verifyEmailVerificationCodeRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([verifyEmailVerificationCodeRequestDto_1], args_1, true), void 0, function (verifyEmailVerificationCodeRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'verifyEmailVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerVerifyEmailVerificationCode', 'verifyEmailVerificationCodeRequestDto', verifyEmailVerificationCodeRequestDto);
                    localVarPath = "/iam/auth/email-verification-code/verify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(verifyEmailVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyPhoneVerificationCode: function (verifyPhoneVerificationCodeRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([verifyPhoneVerificationCodeRequestDto_1], args_1, true), void 0, function (verifyPhoneVerificationCodeRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'verifyPhoneVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerVerifyPhoneVerificationCode', 'verifyPhoneVerificationCodeRequestDto', verifyPhoneVerificationCodeRequestDto);
                    localVarPath = "/iam/auth/phone-verification-code/verify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(verifyPhoneVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.IamAuthApiAxiosParamCreator = IamAuthApiAxiosParamCreator;
/**
 * IamAuthApi - functional programming interface
 * @export
 */
var IamAuthApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IamAuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendEmailVerificationCode: function (generateAndSendEmailVerificationCodeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerGenerateAndSendEmailVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendPhoneVerificationCode: function (generateAndSendPhoneVerificationCodeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerGenerateAndSendPhoneVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateEmailInUseReport: function (generateEmailInUseReportRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerGenerateEmailInUseReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGeneratePhoneInUseReport: function (generatePhoneInUseReportRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerGeneratePhoneInUseReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerMe(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerMe']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerRefresh(refreshRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerRefresh']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmail: function (signInWithEmailRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerSignInWithEmail(signInWithEmailRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerSignInWithEmail']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmail: function (signUpWithEmailRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerSignUpWithEmail(signUpWithEmailRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerSignUpWithEmail']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyEmailVerificationCode: function (verifyEmailVerificationCodeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerVerifyEmailVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyPhoneVerificationCode: function (verifyPhoneVerificationCodeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamAuthApi.authControllerVerifyPhoneVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.IamAuthApiFp = IamAuthApiFp;
/**
 * IamAuthApi - factory interface
 * @export
 */
var IamAuthApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IamAuthApiFp)(configuration);
    return {
        /**
         *
         * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendEmailVerificationCode: function (generateAndSendEmailVerificationCodeRequestDto, options) {
            return localVarFp.authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendPhoneVerificationCode: function (generateAndSendPhoneVerificationCodeRequestDto, options) {
            return localVarFp.authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateEmailInUseReport: function (generateEmailInUseReportRequestDto, options) {
            return localVarFp.authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGeneratePhoneInUseReport: function (generatePhoneInUseReportRequestDto, options) {
            return localVarFp.authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe: function (options) {
            return localVarFp.authControllerMe(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto, options) {
            return localVarFp.authControllerRefresh(refreshRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmail: function (signInWithEmailRequestDto, options) {
            return localVarFp.authControllerSignInWithEmail(signInWithEmailRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmail: function (signUpWithEmailRequestDto, options) {
            return localVarFp.authControllerSignUpWithEmail(signUpWithEmailRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyEmailVerificationCode: function (verifyEmailVerificationCodeRequestDto, options) {
            return localVarFp.authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyPhoneVerificationCode: function (verifyPhoneVerificationCodeRequestDto, options) {
            return localVarFp.authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IamAuthApiFactory = IamAuthApiFactory;
/**
 * IamAuthApi - object-oriented interface
 * @export
 * @class IamAuthApi
 * @extends {BaseAPI}
 */
var IamAuthApi = /** @class */ (function (_super) {
    __extends(IamAuthApi, _super);
    function IamAuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerGenerateAndSendEmailVerificationCode = function (generateAndSendEmailVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerGenerateAndSendPhoneVerificationCode = function (generateAndSendPhoneVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerGenerateEmailInUseReport = function (generateEmailInUseReportRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerGeneratePhoneInUseReport = function (generatePhoneInUseReportRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerMe = function (options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerMe(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerRefresh = function (refreshRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerRefresh(refreshRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerSignInWithEmail = function (signInWithEmailRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerSignInWithEmail(signInWithEmailRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerSignUpWithEmail = function (signUpWithEmailRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerSignUpWithEmail(signUpWithEmailRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerVerifyEmailVerificationCode = function (verifyEmailVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamAuthApi
     */
    IamAuthApi.prototype.authControllerVerifyPhoneVerificationCode = function (verifyPhoneVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.IamAuthApiFp)(this.configuration).authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IamAuthApi;
}(base_1.BaseAPI));
exports.IamAuthApi = IamAuthApi;
/**
 * IamProfilesApi - axios parameter creator
 * @export
 */
var IamProfilesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createProfileRequestDto_1], args_1, true), void 0, function (createProfileRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createProfileRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('profilesControllerCreate', 'createProfileRequestDto', createProfileRequestDto);
                    localVarPath = "/iam/profiles";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createProfileRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/iam/profiles/me";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerPartialUpdate: function (partialUpdateProfileRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([partialUpdateProfileRequestDto_1], args_1, true), void 0, function (partialUpdateProfileRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'partialUpdateProfileRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('profilesControllerPartialUpdate', 'partialUpdateProfileRequestDto', partialUpdateProfileRequestDto);
                    localVarPath = "/iam/profiles/me";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(partialUpdateProfileRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.IamProfilesApiAxiosParamCreator = IamProfilesApiAxiosParamCreator;
/**
 * IamProfilesApi - functional programming interface
 * @export
 */
var IamProfilesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IamProfilesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.profilesControllerCreate(createProfileRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamProfilesApi.profilesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.profilesControllerGetMy(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamProfilesApi.profilesControllerGetMy']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerPartialUpdate: function (partialUpdateProfileRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.profilesControllerPartialUpdate(partialUpdateProfileRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamProfilesApi.profilesControllerPartialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.IamProfilesApiFp = IamProfilesApiFp;
/**
 * IamProfilesApi - factory interface
 * @export
 */
var IamProfilesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IamProfilesApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto, options) {
            return localVarFp.profilesControllerCreate(createProfileRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function (options) {
            return localVarFp.profilesControllerGetMy(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerPartialUpdate: function (partialUpdateProfileRequestDto, options) {
            return localVarFp.profilesControllerPartialUpdate(partialUpdateProfileRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IamProfilesApiFactory = IamProfilesApiFactory;
/**
 * IamProfilesApi - object-oriented interface
 * @export
 * @class IamProfilesApi
 * @extends {BaseAPI}
 */
var IamProfilesApi = /** @class */ (function (_super) {
    __extends(IamProfilesApi, _super);
    function IamProfilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamProfilesApi
     */
    IamProfilesApi.prototype.profilesControllerCreate = function (createProfileRequestDto, options) {
        var _this = this;
        return (0, exports.IamProfilesApiFp)(this.configuration).profilesControllerCreate(createProfileRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamProfilesApi
     */
    IamProfilesApi.prototype.profilesControllerGetMy = function (options) {
        var _this = this;
        return (0, exports.IamProfilesApiFp)(this.configuration).profilesControllerGetMy(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamProfilesApi
     */
    IamProfilesApi.prototype.profilesControllerPartialUpdate = function (partialUpdateProfileRequestDto, options) {
        var _this = this;
        return (0, exports.IamProfilesApiFp)(this.configuration).profilesControllerPartialUpdate(partialUpdateProfileRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IamProfilesApi;
}(base_1.BaseAPI));
exports.IamProfilesApi = IamProfilesApi;
/**
 * IamWorkspacesApi - axios parameter creator
 * @export
 */
var IamWorkspacesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createWorkspaceRequestDto_1], args_1, true), void 0, function (createWorkspaceRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createWorkspaceRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('workspacesControllerCreate', 'createWorkspaceRequestDto', createWorkspaceRequestDto);
                    localVarPath = "/iam/workspaces";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWorkspaceRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerParcialUpdate: function (workspaceId_1, parcialUpdateWorkspaceRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, parcialUpdateWorkspaceRequestDto_1], args_1, true), void 0, function (workspaceId, parcialUpdateWorkspaceRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('workspacesControllerParcialUpdate', 'workspaceId', workspaceId);
                    // verify required parameter 'parcialUpdateWorkspaceRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('workspacesControllerParcialUpdate', 'parcialUpdateWorkspaceRequestDto', parcialUpdateWorkspaceRequestDto);
                    localVarPath = "/iam/workspaces/{workspaceId}"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(parcialUpdateWorkspaceRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.IamWorkspacesApiAxiosParamCreator = IamWorkspacesApiAxiosParamCreator;
/**
 * IamWorkspacesApi - functional programming interface
 * @export
 */
var IamWorkspacesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IamWorkspacesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspacesControllerCreate(createWorkspaceRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamWorkspacesApi.workspacesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerParcialUpdate: function (workspaceId, parcialUpdateWorkspaceRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspacesControllerParcialUpdate(workspaceId, parcialUpdateWorkspaceRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['IamWorkspacesApi.workspacesControllerParcialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.IamWorkspacesApiFp = IamWorkspacesApiFp;
/**
 * IamWorkspacesApi - factory interface
 * @export
 */
var IamWorkspacesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IamWorkspacesApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto, options) {
            return localVarFp.workspacesControllerCreate(createWorkspaceRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerParcialUpdate: function (workspaceId, parcialUpdateWorkspaceRequestDto, options) {
            return localVarFp.workspacesControllerParcialUpdate(workspaceId, parcialUpdateWorkspaceRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IamWorkspacesApiFactory = IamWorkspacesApiFactory;
/**
 * IamWorkspacesApi - object-oriented interface
 * @export
 * @class IamWorkspacesApi
 * @extends {BaseAPI}
 */
var IamWorkspacesApi = /** @class */ (function (_super) {
    __extends(IamWorkspacesApi, _super);
    function IamWorkspacesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamWorkspacesApi
     */
    IamWorkspacesApi.prototype.workspacesControllerCreate = function (createWorkspaceRequestDto, options) {
        var _this = this;
        return (0, exports.IamWorkspacesApiFp)(this.configuration).workspacesControllerCreate(createWorkspaceRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {ParcialUpdateWorkspaceRequestDto} parcialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamWorkspacesApi
     */
    IamWorkspacesApi.prototype.workspacesControllerParcialUpdate = function (workspaceId, parcialUpdateWorkspaceRequestDto, options) {
        var _this = this;
        return (0, exports.IamWorkspacesApiFp)(this.configuration).workspacesControllerParcialUpdate(workspaceId, parcialUpdateWorkspaceRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IamWorkspacesApi;
}(base_1.BaseAPI));
exports.IamWorkspacesApi = IamWorkspacesApi;
/**
 * MessageTokensApi - axios parameter creator
 * @export
 */
var MessageTokensApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerCreateOrUpdateMessageToken: function (workspaceId_1, createOrUpdateMessageTokenRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, createOrUpdateMessageTokenRequestDto_1], args_1, true), void 0, function (workspaceId, createOrUpdateMessageTokenRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('messageTokensControllerCreateOrUpdateMessageToken', 'workspaceId', workspaceId);
                    // verify required parameter 'createOrUpdateMessageTokenRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('messageTokensControllerCreateOrUpdateMessageToken', 'createOrUpdateMessageTokenRequestDto', createOrUpdateMessageTokenRequestDto);
                    localVarPath = "/workspaces/{workspaceId}/message-tokens"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateMessageTokenRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerGetWorkspaceMessageTokens: function (workspaceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1], args_1, true), void 0, function (workspaceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('messageTokensControllerGetWorkspaceMessageTokens', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/message-tokens"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.MessageTokensApiAxiosParamCreator = MessageTokensApiAxiosParamCreator;
/**
 * MessageTokensApi - functional programming interface
 * @export
 */
var MessageTokensApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MessageTokensApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerCreateOrUpdateMessageToken: function (workspaceId, createOrUpdateMessageTokenRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.messageTokensControllerCreateOrUpdateMessageToken(workspaceId, createOrUpdateMessageTokenRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MessageTokensApi.messageTokensControllerCreateOrUpdateMessageToken']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerGetWorkspaceMessageTokens: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.messageTokensControllerGetWorkspaceMessageTokens(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MessageTokensApi.messageTokensControllerGetWorkspaceMessageTokens']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.MessageTokensApiFp = MessageTokensApiFp;
/**
 * MessageTokensApi - factory interface
 * @export
 */
var MessageTokensApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MessageTokensApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerCreateOrUpdateMessageToken: function (workspaceId, createOrUpdateMessageTokenRequestDto, options) {
            return localVarFp.messageTokensControllerCreateOrUpdateMessageToken(workspaceId, createOrUpdateMessageTokenRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerGetWorkspaceMessageTokens: function (workspaceId, options) {
            return localVarFp.messageTokensControllerGetWorkspaceMessageTokens(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MessageTokensApiFactory = MessageTokensApiFactory;
/**
 * MessageTokensApi - object-oriented interface
 * @export
 * @class MessageTokensApi
 * @extends {BaseAPI}
 */
var MessageTokensApi = /** @class */ (function (_super) {
    __extends(MessageTokensApi, _super);
    function MessageTokensApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTokensApi
     */
    MessageTokensApi.prototype.messageTokensControllerCreateOrUpdateMessageToken = function (workspaceId, createOrUpdateMessageTokenRequestDto, options) {
        var _this = this;
        return (0, exports.MessageTokensApiFp)(this.configuration).messageTokensControllerCreateOrUpdateMessageToken(workspaceId, createOrUpdateMessageTokenRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTokensApi
     */
    MessageTokensApi.prototype.messageTokensControllerGetWorkspaceMessageTokens = function (workspaceId, options) {
        var _this = this;
        return (0, exports.MessageTokensApiFp)(this.configuration).messageTokensControllerGetWorkspaceMessageTokens(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MessageTokensApi;
}(base_1.BaseAPI));
exports.MessageTokensApi = MessageTokensApi;
/**
 * PluggyApi - axios parameter creator
 * @export
 */
var PluggyApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreate: function (createPluggyConnectTokenRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createPluggyConnectTokenRequestDto_1], args_1, true), void 0, function (createPluggyConnectTokenRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createPluggyConnectTokenRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('pluggyControllerCreate', 'createPluggyConnectTokenRequestDto', createPluggyConnectTokenRequestDto);
                    localVarPath = "/pluggy/connect-token";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPluggyConnectTokenRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/pluggy/webhook";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.PluggyApiAxiosParamCreator = PluggyApiAxiosParamCreator;
/**
 * PluggyApi - functional programming interface
 * @export
 */
var PluggyApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PluggyApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreate: function (createPluggyConnectTokenRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pluggyControllerCreate(createPluggyConnectTokenRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PluggyApi.pluggyControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pluggyControllerWebhook(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PluggyApi.pluggyControllerWebhook']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PluggyApiFp = PluggyApiFp;
/**
 * PluggyApi - factory interface
 * @export
 */
var PluggyApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PluggyApiFp)(configuration);
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreate: function (createPluggyConnectTokenRequestDto, options) {
            return localVarFp.pluggyControllerCreate(createPluggyConnectTokenRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function (options) {
            return localVarFp.pluggyControllerWebhook(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PluggyApiFactory = PluggyApiFactory;
/**
 * PluggyApi - object-oriented interface
 * @export
 * @class PluggyApi
 * @extends {BaseAPI}
 */
var PluggyApi = /** @class */ (function (_super) {
    __extends(PluggyApi, _super);
    function PluggyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    PluggyApi.prototype.pluggyControllerCreate = function (createPluggyConnectTokenRequestDto, options) {
        var _this = this;
        return (0, exports.PluggyApiFp)(this.configuration).pluggyControllerCreate(createPluggyConnectTokenRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    PluggyApi.prototype.pluggyControllerWebhook = function (options) {
        var _this = this;
        return (0, exports.PluggyApiFp)(this.configuration).pluggyControllerWebhook(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PluggyApi;
}(base_1.BaseAPI));
exports.PluggyApi = PluggyApi;
/**
 * ReportsApi - axios parameter creator
 * @export
 */
var ReportsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsEntriesByCategoryReport: function (workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1) {
            var args_1 = [];
            for (var _i = 11; _i < arguments.length; _i++) {
                args_1[_i - 11] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetAccountsEntriesByCategoryReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/accounts/entries-by-category"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (ignoreInternalTransfers !== undefined) {
                        localVarQueryParameter['ignoreInternalTransfers'] = ignoreInternalTransfers;
                    }
                    if (ignoreAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['ignoreAutomaticApplicationRelated'] = ignoreAutomaticApplicationRelated;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsOutputsByCategoryReport: function (workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1) {
            var args_1 = [];
            for (var _i = 11; _i < arguments.length; _i++) {
                args_1[_i - 11] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetAccountsOutputsByCategoryReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/accounts/outputs-by-category"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (ignoreInternalTransfers !== undefined) {
                        localVarQueryParameter['ignoreInternalTransfers'] = ignoreInternalTransfers;
                    }
                    if (ignoreAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['ignoreAutomaticApplicationRelated'] = ignoreAutomaticApplicationRelated;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetBusinessIndicators: function (workspaceId_1, accountIds_1, tagIds_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetBusinessIndicators', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/indicators/business"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsCashFlowReport: function (workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInvoiceRelated_1) {
            var args_1 = [];
            for (var _i = 7; _i < arguments.length; _i++) {
                args_1[_i - 7] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInvoiceRelated_1], args_1, true), void 0, function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetCardsCashFlowReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/cards/cash-flow"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (ignoreInvoiceRelated !== undefined) {
                        localVarQueryParameter['ignoreInvoiceRelated'] = ignoreInvoiceRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsOutputsByCategoryReport: function (workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1, ignoreInvoiceRelated_1) {
            var args_1 = [];
            for (var _i = 10; _i < arguments.length; _i++) {
                args_1[_i - 10] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1, ignoreInvoiceRelated_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetCardsOutputsByCategoryReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/cards/outputs-by-category"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    if (ignoreInvoiceRelated !== undefined) {
                        localVarQueryParameter['ignoreInvoiceRelated'] = ignoreInvoiceRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCashFlowReport: function (workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1], args_1, true), void 0, function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetCashFlowReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/accounts/cash-flow"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (ignoreInternalTransfers !== undefined) {
                        localVarQueryParameter['ignoreInternalTransfers'] = ignoreInternalTransfers;
                    }
                    if (ignoreAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['ignoreAutomaticApplicationRelated'] = ignoreAutomaticApplicationRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetFinancialStatementReport: function (workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetFinancialStatementReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/financial-statement"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ReportsApiAxiosParamCreator = ReportsApiAxiosParamCreator;
/**
 * ReportsApi - functional programming interface
 * @export
 */
var ReportsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ReportsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsEntriesByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetAccountsEntriesByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetAccountsEntriesByCategoryReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsOutputsByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetAccountsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetAccountsOutputsByCategoryReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetBusinessIndicators: function (workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetBusinessIndicators(workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetBusinessIndicators']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsCashFlowReport: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetCardsCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetCardsCashFlowReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsOutputsByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetCardsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetCardsOutputsByCategoryReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCashFlowReport: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetCashFlowReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetFinancialStatementReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetFinancialStatementReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetFinancialStatementReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ReportsApiFp = ReportsApiFp;
/**
 * ReportsApi - factory interface
 * @export
 */
var ReportsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ReportsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsEntriesByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return localVarFp.reportsControllerGetAccountsEntriesByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsOutputsByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return localVarFp.reportsControllerGetAccountsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetBusinessIndicators: function (workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return localVarFp.reportsControllerGetBusinessIndicators(workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsCashFlowReport: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options) {
            return localVarFp.reportsControllerGetCardsCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsOutputsByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options) {
            return localVarFp.reportsControllerGetCardsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCashFlowReport: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options) {
            return localVarFp.reportsControllerGetCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetFinancialStatementReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return localVarFp.reportsControllerGetFinancialStatementReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ReportsApiFactory = ReportsApiFactory;
/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
var ReportsApi = /** @class */ (function (_super) {
    __extends(ReportsApi, _super);
    function ReportsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetAccountsEntriesByCategoryReport = function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetAccountsEntriesByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetAccountsOutputsByCategoryReport = function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetAccountsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetBusinessIndicators = function (workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetBusinessIndicators(workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetCardsCashFlowReport = function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetCardsCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetCardsOutputsByCategoryReport = function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetCardsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetCashFlowReport = function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetFinancialStatementReport = function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetFinancialStatementReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ReportsApi;
}(base_1.BaseAPI));
exports.ReportsApi = ReportsApi;
