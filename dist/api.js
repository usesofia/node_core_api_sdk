"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Api
 * Api principal do sistema Sofia.
 *
 * The version of the OpenAPI document: 1.0.14
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncBankItemRequestDtoProviderEnum = exports.SyncBankAccountTransactionsRequestDtoProviderEnum = exports.SyncBankAccountTransactionsPageEndRequestDtoLegalNatureAssignRequestsInnerLegalNatureValueEnum = exports.SyncBankAccountTransactionsPageEndRequestDtoLegalNatureAssignRequestsInnerLegalNatureOriginEnum = exports.SyncBankAccountTransactionsPageEndRequestDtoCategoryAssignRequestsInnerCategoryOriginEnum = exports.SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerStatusEnum = exports.SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerDirectionNatureEnum = exports.PartialUpdateBankTransactionRequestDtoLegalNatureEnum = exports.MessageTokenEntityWorksapceTypeEnum = exports.MessageTokenEntityPlatformEnum = exports.MessageTokenEntityProviderEnum = exports.GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum = exports.GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum = exports.CreateWorkspaceRequestDtoBusinessSegmentEnum = exports.CreateWorkspaceRequestDtoTypeEnum = exports.CreatePluggyConnectTokenRequestDtoHistoryRangeEnum = exports.CreateOrUpdateMessageTokenRequestDtoProviderEnum = exports.CreateOrUpdateMessageTokenRequestDtoPlatformEnum = exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerLegalNatureGuessesInnerLegalNatureEnum = exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerLegalNatureEnum = exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerStatusEnum = exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerDirectionNatureEnum = exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerProviderEnum = exports.CreateOrUpdateBankConnectionRequestDtoHistoryRangeEnum = exports.CreateOrUpdateBankConnectionRequestDtoProviderEnum = exports.CreateOrUpdateBankAccountRequestDtoTypeEnum = exports.CreateOrUpdateBankAccountRequestDtoProviderEnum = exports.BankTransactionsPageEntityItemsInnerLegalNatureEnum = exports.BankTransactionsPageEntityItemsInnerStatusEnum = exports.BankTransactionsPageEntityItemsInnerDirectionNatureEnum = exports.BankTransactionsPageEntityItemsInnerProviderEnum = exports.BankTransactionEntityCategoryDirectionNatureEnum = exports.BankTransactionEntityAccountBankConnectionHistoryRangeEnum = exports.BankTransactionEntityAccountBankConnectionProviderEnum = exports.BankTransactionEntityAccountTypeEnum = exports.BankTransactionEntityAccountProviderEnum = exports.BankTransactionEntityLegalNatureEnum = exports.BankTransactionEntityStatusEnum = exports.BankTransactionEntityDirectionNatureEnum = exports.BankTransactionEntityProviderEnum = exports.BankTransactionCategoryEntityChildrenInnerDirectionNatureEnum = exports.BankTransactionCategoryEntityDirectionNatureEnum = exports.BankConnectionEntityConnectorTypeEnum = exports.BankConnectionEntityConnectorProviderEnum = exports.BankConnectionEntityAccountsInnerTypeEnum = exports.BankConnectionEntityAccountsInnerProviderEnum = exports.BankConnectionEntityHistoryRangeEnum = exports.BankConnectionEntityProviderEnum = exports.BankAccountEntityTypeEnum = exports.BankAccountEntityProviderEnum = void 0;
exports.MessageTokensApi = exports.MessageTokensApiFactory = exports.MessageTokensApiFp = exports.MessageTokensApiAxiosParamCreator = exports.HelloApi = exports.HelloApiFactory = exports.HelloApiFp = exports.HelloApiAxiosParamCreator = exports.BankTransactionsPageLegalNatureAssignerApi = exports.BankTransactionsPageLegalNatureAssignerApiFactory = exports.BankTransactionsPageLegalNatureAssignerApiFp = exports.BankTransactionsPageLegalNatureAssignerApiAxiosParamCreator = exports.BankTransactionsPageCategoryAssignerApi = exports.BankTransactionsPageCategoryAssignerApiFactory = exports.BankTransactionsPageCategoryAssignerApiFp = exports.BankTransactionsPageCategoryAssignerApiAxiosParamCreator = exports.BankTransactionsApi = exports.BankTransactionsApiFactory = exports.BankTransactionsApiFp = exports.BankTransactionsApiAxiosParamCreator = exports.BankTransactionTagsApi = exports.BankTransactionTagsApiFactory = exports.BankTransactionTagsApiFp = exports.BankTransactionTagsApiAxiosParamCreator = exports.BankTransactionCategoriesApi = exports.BankTransactionCategoriesApiFactory = exports.BankTransactionCategoriesApiFp = exports.BankTransactionCategoriesApiAxiosParamCreator = exports.BankSyncApi = exports.BankSyncApiFactory = exports.BankSyncApiFp = exports.BankSyncApiAxiosParamCreator = exports.BankConnectionsApi = exports.BankConnectionsApiFactory = exports.BankConnectionsApiFp = exports.BankConnectionsApiAxiosParamCreator = exports.BankAccountsApi = exports.BankAccountsApiFactory = exports.BankAccountsApiFp = exports.BankAccountsApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.WorkspaceEntityTypeEnum = exports.VerifyPhoneVerificationCodeRequestDtoPurposeEnum = exports.VerifyEmailVerificationCodeRequestDtoPurposeEnum = exports.UserRelatedWorkspaceEntityRelationTypeEnum = exports.UserEntityWorkspacesInnerHybridSettingsBusinessSegmentEnum = exports.UserEntityWorkspacesInnerTypeEnum = void 0;
exports.WorkspacesApi = exports.WorkspacesApiFactory = exports.WorkspacesApiFp = exports.WorkspacesApiAxiosParamCreator = exports.ReportsApi = exports.ReportsApiFactory = exports.ReportsApiFp = exports.ReportsApiAxiosParamCreator = exports.ProfilesApi = exports.ProfilesApiFactory = exports.ProfilesApiFp = exports.ProfilesApiAxiosParamCreator = exports.PluggyApi = exports.PluggyApiFactory = exports.PluggyApiFp = exports.PluggyApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.BankAccountEntityProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankAccountEntityTypeEnum = {
    Checking: 'CHECKING',
    Savings: 'SAVINGS',
    CreditCard: 'CREDIT_CARD'
};
exports.BankConnectionEntityProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankConnectionEntityHistoryRangeEnum = {
    OneDay: 'ONE_DAY',
    OneWeek: 'ONE_WEEK',
    OneMonth: 'ONE_MONTH',
    TwoMonths: 'TWO_MONTHS',
    ThreeMonths: 'THREE_MONTHS',
    SixMonths: 'SIX_MONTHS',
    OneYear: 'ONE_YEAR'
};
exports.BankConnectionEntityAccountsInnerProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankConnectionEntityAccountsInnerTypeEnum = {
    Checking: 'CHECKING',
    Savings: 'SAVINGS',
    CreditCard: 'CREDIT_CARD'
};
exports.BankConnectionEntityConnectorProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankConnectionEntityConnectorTypeEnum = {
    PersonalBank: 'PERSONAL_BANK',
    BusinessBank: 'BUSINESS_BANK',
    Investment: 'INVESTMENT',
    DigitalEconomy: 'DIGITAL_ECONOMY',
    Other: 'OTHER'
};
exports.BankTransactionCategoryEntityDirectionNatureEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Undefined: 'UNDEFINED'
};
exports.BankTransactionCategoryEntityChildrenInnerDirectionNatureEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Undefined: 'UNDEFINED'
};
exports.BankTransactionEntityProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankTransactionEntityDirectionNatureEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Undefined: 'UNDEFINED'
};
exports.BankTransactionEntityStatusEnum = {
    Pending: 'PENDING',
    Posted: 'POSTED'
};
exports.BankTransactionEntityLegalNatureEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Undefined: 'UNDEFINED'
};
exports.BankTransactionEntityAccountProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankTransactionEntityAccountTypeEnum = {
    Checking: 'CHECKING',
    Savings: 'SAVINGS',
    CreditCard: 'CREDIT_CARD'
};
exports.BankTransactionEntityAccountBankConnectionProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankTransactionEntityAccountBankConnectionHistoryRangeEnum = {
    OneDay: 'ONE_DAY',
    OneWeek: 'ONE_WEEK',
    OneMonth: 'ONE_MONTH',
    TwoMonths: 'TWO_MONTHS',
    ThreeMonths: 'THREE_MONTHS',
    SixMonths: 'SIX_MONTHS',
    OneYear: 'ONE_YEAR'
};
exports.BankTransactionEntityCategoryDirectionNatureEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Undefined: 'UNDEFINED'
};
exports.BankTransactionsPageEntityItemsInnerProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.BankTransactionsPageEntityItemsInnerDirectionNatureEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Undefined: 'UNDEFINED'
};
exports.BankTransactionsPageEntityItemsInnerStatusEnum = {
    Pending: 'PENDING',
    Posted: 'POSTED'
};
exports.BankTransactionsPageEntityItemsInnerLegalNatureEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Undefined: 'UNDEFINED'
};
exports.CreateOrUpdateBankAccountRequestDtoProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.CreateOrUpdateBankAccountRequestDtoTypeEnum = {
    Checking: 'CHECKING',
    Savings: 'SAVINGS',
    CreditCard: 'CREDIT_CARD'
};
exports.CreateOrUpdateBankConnectionRequestDtoProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.CreateOrUpdateBankConnectionRequestDtoHistoryRangeEnum = {
    OneDay: 'ONE_DAY',
    OneWeek: 'ONE_WEEK',
    OneMonth: 'ONE_MONTH',
    TwoMonths: 'TWO_MONTHS',
    ThreeMonths: 'THREE_MONTHS',
    SixMonths: 'SIX_MONTHS',
    OneYear: 'ONE_YEAR'
};
exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerDirectionNatureEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Undefined: 'UNDEFINED'
};
exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerStatusEnum = {
    Pending: 'PENDING',
    Posted: 'POSTED'
};
exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerLegalNatureEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Undefined: 'UNDEFINED'
};
exports.CreateOrUpdateBankTransactionsInBulkRequestDtoItemsInnerLegalNatureGuessesInnerLegalNatureEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Undefined: 'UNDEFINED'
};
exports.CreateOrUpdateMessageTokenRequestDtoPlatformEnum = {
    Web: 'WEB',
    Android: 'ANDROID',
    Ios: 'IOS'
};
exports.CreateOrUpdateMessageTokenRequestDtoProviderEnum = {
    FirebaseMessaging: 'FIREBASE_MESSAGING'
};
exports.CreatePluggyConnectTokenRequestDtoHistoryRangeEnum = {
    OneDay: 'ONE_DAY',
    OneWeek: 'ONE_WEEK',
    OneMonth: 'ONE_MONTH',
    TwoMonths: 'TWO_MONTHS',
    ThreeMonths: 'THREE_MONTHS',
    SixMonths: 'SIX_MONTHS',
    OneYear: 'ONE_YEAR'
};
exports.CreateWorkspaceRequestDtoTypeEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Hybrid: 'HYBRID'
};
exports.CreateWorkspaceRequestDtoBusinessSegmentEnum = {
    Attorney: 'ATTORNEY',
    Architect: 'ARCHITECT',
    Consultant: 'CONSULTANT',
    Realtor: 'REALTOR',
    InsuranceBroker: 'INSURANCE_BROKER',
    Dentist: 'DENTIST',
    Physiotherapist: 'PHYSIOTHERAPIST',
    Physician: 'PHYSICIAN',
    Tutor: 'TUTOR',
    Psychologist: 'PSYCHOLOGIST',
    Other: 'OTHER'
};
exports.GenerateAndSendEmailVerificationCodeRequestDtoPurposeEnum = {
    Up: 'SIGN_UP',
    In: 'SIGN_IN'
};
exports.GenerateAndSendPhoneVerificationCodeRequestDtoPurposeEnum = {
    Up: 'SIGN_UP',
    In: 'SIGN_IN'
};
exports.MessageTokenEntityProviderEnum = {
    FirebaseMessaging: 'FIREBASE_MESSAGING'
};
exports.MessageTokenEntityPlatformEnum = {
    Web: 'WEB',
    Android: 'ANDROID',
    Ios: 'IOS'
};
exports.MessageTokenEntityWorksapceTypeEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Hybrid: 'HYBRID'
};
exports.PartialUpdateBankTransactionRequestDtoLegalNatureEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Undefined: 'UNDEFINED'
};
exports.SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerDirectionNatureEnum = {
    Credit: 'CREDIT',
    Debit: 'DEBIT',
    Undefined: 'UNDEFINED'
};
exports.SyncBankAccountTransactionsPageEndRequestDtoBankProviderTransactionsPageTransactionsInnerStatusEnum = {
    Pending: 'PENDING',
    Posted: 'POSTED'
};
exports.SyncBankAccountTransactionsPageEndRequestDtoCategoryAssignRequestsInnerCategoryOriginEnum = {
    Undefined: 'UNDEFINED',
    Prediction: 'PREDICTION'
};
exports.SyncBankAccountTransactionsPageEndRequestDtoLegalNatureAssignRequestsInnerLegalNatureOriginEnum = {
    Automatic: 'AUTOMATIC',
    Prediction: 'PREDICTION'
};
exports.SyncBankAccountTransactionsPageEndRequestDtoLegalNatureAssignRequestsInnerLegalNatureValueEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Undefined: 'UNDEFINED'
};
exports.SyncBankAccountTransactionsRequestDtoProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.SyncBankItemRequestDtoProviderEnum = {
    Pluggy: 'PLUGGY',
    Sofia: 'SOFIA'
};
exports.UserEntityWorkspacesInnerTypeEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Hybrid: 'HYBRID'
};
exports.UserEntityWorkspacesInnerHybridSettingsBusinessSegmentEnum = {
    Attorney: 'ATTORNEY',
    Architect: 'ARCHITECT',
    Consultant: 'CONSULTANT',
    Realtor: 'REALTOR',
    InsuranceBroker: 'INSURANCE_BROKER',
    Dentist: 'DENTIST',
    Physiotherapist: 'PHYSIOTHERAPIST',
    Physician: 'PHYSICIAN',
    Tutor: 'TUTOR',
    Psychologist: 'PSYCHOLOGIST',
    Other: 'OTHER'
};
exports.UserRelatedWorkspaceEntityRelationTypeEnum = {
    Approved: 'APPROVED',
    WaitingApproval: 'WAITING_APPROVAL'
};
exports.VerifyEmailVerificationCodeRequestDtoPurposeEnum = {
    Up: 'SIGN_UP',
    In: 'SIGN_IN'
};
exports.VerifyPhoneVerificationCodeRequestDtoPurposeEnum = {
    Up: 'SIGN_UP',
    In: 'SIGN_IN'
};
exports.WorkspaceEntityTypeEnum = {
    Personal: 'PERSONAL',
    Business: 'BUSINESS',
    Hybrid: 'HYBRID'
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
var AuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendEmailVerificationCode: function (generateAndSendEmailVerificationCodeRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([generateAndSendEmailVerificationCodeRequestDto_1], args_1, true), void 0, function (generateAndSendEmailVerificationCodeRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'generateAndSendEmailVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerGenerateAndSendEmailVerificationCode', 'generateAndSendEmailVerificationCodeRequestDto', generateAndSendEmailVerificationCodeRequestDto);
                    localVarPath = "/iam/auth/email-verification-code";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateAndSendEmailVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendPhoneVerificationCode: function (generateAndSendPhoneVerificationCodeRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([generateAndSendPhoneVerificationCodeRequestDto_1], args_1, true), void 0, function (generateAndSendPhoneVerificationCodeRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'generateAndSendPhoneVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerGenerateAndSendPhoneVerificationCode', 'generateAndSendPhoneVerificationCodeRequestDto', generateAndSendPhoneVerificationCodeRequestDto);
                    localVarPath = "/iam/auth/phone-verification-code";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateAndSendPhoneVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateEmailInUseReport: function (generateEmailInUseReportRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([generateEmailInUseReportRequestDto_1], args_1, true), void 0, function (generateEmailInUseReportRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'generateEmailInUseReportRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerGenerateEmailInUseReport', 'generateEmailInUseReportRequestDto', generateEmailInUseReportRequestDto);
                    localVarPath = "/iam/auth/email-in-use";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generateEmailInUseReportRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGeneratePhoneInUseReport: function (generatePhoneInUseReportRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([generatePhoneInUseReportRequestDto_1], args_1, true), void 0, function (generatePhoneInUseReportRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'generatePhoneInUseReportRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerGeneratePhoneInUseReport', 'generatePhoneInUseReportRequestDto', generatePhoneInUseReportRequestDto);
                    localVarPath = "/iam/auth/phone-in-use";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(generatePhoneInUseReportRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetMe: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/iam/auth/me";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([refreshRequestDto_1], args_1, true), void 0, function (refreshRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'refreshRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerRefresh', 'refreshRequestDto', refreshRequestDto);
                    localVarPath = "/iam/auth/refresh";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(refreshRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmail: function (signInWithEmailRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([signInWithEmailRequestDto_1], args_1, true), void 0, function (signInWithEmailRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'signInWithEmailRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerSignInWithEmail', 'signInWithEmailRequestDto', signInWithEmailRequestDto);
                    localVarPath = "/iam/auth/sign-in/email";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signInWithEmailRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmail: function (signUpWithEmailRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([signUpWithEmailRequestDto_1], args_1, true), void 0, function (signUpWithEmailRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'signUpWithEmailRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerSignUpWithEmail', 'signUpWithEmailRequestDto', signUpWithEmailRequestDto);
                    localVarPath = "/iam/auth/sign-up/email";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signUpWithEmailRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyEmailVerificationCode: function (verifyEmailVerificationCodeRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([verifyEmailVerificationCodeRequestDto_1], args_1, true), void 0, function (verifyEmailVerificationCodeRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'verifyEmailVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerVerifyEmailVerificationCode', 'verifyEmailVerificationCodeRequestDto', verifyEmailVerificationCodeRequestDto);
                    localVarPath = "/iam/auth/email-verification-code/verify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(verifyEmailVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyPhoneVerificationCode: function (verifyPhoneVerificationCodeRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([verifyPhoneVerificationCodeRequestDto_1], args_1, true), void 0, function (verifyPhoneVerificationCodeRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'verifyPhoneVerificationCodeRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('authControllerVerifyPhoneVerificationCode', 'verifyPhoneVerificationCodeRequestDto', verifyPhoneVerificationCodeRequestDto);
                    localVarPath = "/iam/auth/phone-verification-code/verify";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(verifyPhoneVerificationCodeRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
var AuthApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendEmailVerificationCode: function (generateAndSendEmailVerificationCodeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGenerateAndSendEmailVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendPhoneVerificationCode: function (generateAndSendPhoneVerificationCodeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGenerateAndSendPhoneVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateEmailInUseReport: function (generateEmailInUseReportRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGenerateEmailInUseReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGeneratePhoneInUseReport: function (generatePhoneInUseReportRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGeneratePhoneInUseReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetMe: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerGetMe(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerGetMe']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerRefresh(refreshRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerRefresh']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmail: function (signInWithEmailRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerSignInWithEmail(signInWithEmailRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerSignInWithEmail']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmail: function (signUpWithEmailRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerSignUpWithEmail(signUpWithEmailRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerSignUpWithEmail']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyEmailVerificationCode: function (verifyEmailVerificationCodeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerVerifyEmailVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyPhoneVerificationCode: function (verifyPhoneVerificationCodeRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authControllerVerifyPhoneVerificationCode']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
var AuthApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendEmailVerificationCode: function (generateAndSendEmailVerificationCodeRequestDto, options) {
            return localVarFp.authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateAndSendPhoneVerificationCode: function (generateAndSendPhoneVerificationCodeRequestDto, options) {
            return localVarFp.authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGenerateEmailInUseReport: function (generateEmailInUseReportRequestDto, options) {
            return localVarFp.authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGeneratePhoneInUseReport: function (generatePhoneInUseReportRequestDto, options) {
            return localVarFp.authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetMe: function (options) {
            return localVarFp.authControllerGetMe(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {RefreshRequestDto} refreshRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: function (refreshRequestDto, options) {
            return localVarFp.authControllerRefresh(refreshRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignInWithEmail: function (signInWithEmailRequestDto, options) {
            return localVarFp.authControllerSignInWithEmail(signInWithEmailRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUpWithEmail: function (signUpWithEmailRequestDto, options) {
            return localVarFp.authControllerSignUpWithEmail(signUpWithEmailRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyEmailVerificationCode: function (verifyEmailVerificationCodeRequestDto, options) {
            return localVarFp.authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyPhoneVerificationCode: function (verifyPhoneVerificationCodeRequestDto, options) {
            return localVarFp.authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {GenerateAndSendEmailVerificationCodeRequestDto} generateAndSendEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerGenerateAndSendEmailVerificationCode = function (generateAndSendEmailVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerGenerateAndSendEmailVerificationCode(generateAndSendEmailVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {GenerateAndSendPhoneVerificationCodeRequestDto} generateAndSendPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerGenerateAndSendPhoneVerificationCode = function (generateAndSendPhoneVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerGenerateAndSendPhoneVerificationCode(generateAndSendPhoneVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {GenerateEmailInUseReportRequestDto} generateEmailInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerGenerateEmailInUseReport = function (generateEmailInUseReportRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerGenerateEmailInUseReport(generateEmailInUseReportRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {GeneratePhoneInUseReportRequestDto} generatePhoneInUseReportRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerGeneratePhoneInUseReport = function (generatePhoneInUseReportRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerGeneratePhoneInUseReport(generatePhoneInUseReportRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerGetMe = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerGetMe(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {RefreshRequestDto} refreshRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerRefresh = function (refreshRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerRefresh(refreshRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SignInWithEmailRequestDto} signInWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerSignInWithEmail = function (signInWithEmailRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerSignInWithEmail(signInWithEmailRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SignUpWithEmailRequestDto} signUpWithEmailRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerSignUpWithEmail = function (signUpWithEmailRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerSignUpWithEmail(signUpWithEmailRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VerifyEmailVerificationCodeRequestDto} verifyEmailVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerVerifyEmailVerificationCode = function (verifyEmailVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerVerifyEmailVerificationCode(verifyEmailVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VerifyPhoneVerificationCodeRequestDto} verifyPhoneVerificationCodeRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authControllerVerifyPhoneVerificationCode = function (verifyPhoneVerificationCodeRequestDto, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authControllerVerifyPhoneVerificationCode(verifyPhoneVerificationCodeRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthApi;
}(base_1.BaseAPI));
exports.AuthApi = AuthApi;
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
var BankAccountsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivate: function (bankAccountId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankAccountId_1], args_1, true), void 0, function (bankAccountId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerActivate', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}/activate"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdate: function (createOrUpdateBankAccountRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createOrUpdateBankAccountRequestDto_1], args_1, true), void 0, function (createOrUpdateBankAccountRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createOrUpdateBankAccountRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerCreateOrUpdate', 'createOrUpdateBankAccountRequestDto', createOrUpdateBankAccountRequestDto);
                    localVarPath = "/bank/accounts";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankAccountRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBalanceReport: function (workspaceId_1, enabled_1, types_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, enabled_1, types_1], args_1, true), void 0, function (workspaceId, enabled, types, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerCreateWorkspaceBalanceReport', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/accounts/balance-report"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisable: function (bankAccountId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankAccountId_1], args_1, true), void 0, function (bankAccountId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerDisable', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}/disable"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetById: function (bankAccountId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankAccountId_1], args_1, true), void 0, function (bankAccountId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankAccountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerGetById', 'bankAccountId', bankAccountId);
                    localVarPath = "/bank/accounts/{bankAccountId}"
                        .replace("{".concat("bankAccountId", "}"), encodeURIComponent(String(bankAccountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerListByBankConnectionId: function (bankConnectionId_1, enabled_1, types_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankConnectionId_1, enabled_1, types_1], args_1, true), void 0, function (bankConnectionId, enabled, types, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerListByBankConnectionId', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}/accounts"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerListByWorkspaceId: function (workspaceId_1, enabled_1, types_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, enabled_1, types_1], args_1, true), void 0, function (workspaceId, enabled, types, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsControllerListByWorkspaceId', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/accounts"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    if (types !== undefined) {
                        localVarQueryParameter['types'] = types;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankAccountsApiAxiosParamCreator = BankAccountsApiAxiosParamCreator;
/**
 * BankAccountsApi - functional programming interface
 * @export
 */
var BankAccountsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankAccountsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivate: function (bankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerActivate(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerActivate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdate: function (createOrUpdateBankAccountRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerCreateOrUpdate(createOrUpdateBankAccountRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerCreateOrUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBalanceReport: function (workspaceId, enabled, types, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerCreateWorkspaceBalanceReport(workspaceId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerCreateWorkspaceBalanceReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisable: function (bankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerDisable(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerDisable']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetById: function (bankAccountId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerGetById(bankAccountId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerGetById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerListByBankConnectionId: function (bankConnectionId, enabled, types, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerListByBankConnectionId(bankConnectionId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerListByBankConnectionId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerListByWorkspaceId: function (workspaceId, enabled, types, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsControllerListByWorkspaceId(workspaceId, enabled, types, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankAccountsApi.bankAccountsControllerListByWorkspaceId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankAccountsApiFp = BankAccountsApiFp;
/**
 * BankAccountsApi - factory interface
 * @export
 */
var BankAccountsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankAccountsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerActivate: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerActivate(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateOrUpdate: function (createOrUpdateBankAccountRequestDto, options) {
            return localVarFp.bankAccountsControllerCreateOrUpdate(createOrUpdateBankAccountRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerCreateWorkspaceBalanceReport: function (workspaceId, enabled, types, options) {
            return localVarFp.bankAccountsControllerCreateWorkspaceBalanceReport(workspaceId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerDisable: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerDisable(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankAccountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerGetById: function (bankAccountId, options) {
            return localVarFp.bankAccountsControllerGetById(bankAccountId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerListByBankConnectionId: function (bankConnectionId, enabled, types, options) {
            return localVarFp.bankAccountsControllerListByBankConnectionId(bankConnectionId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {string} [types]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsControllerListByWorkspaceId: function (workspaceId, enabled, types, options) {
            return localVarFp.bankAccountsControllerListByWorkspaceId(workspaceId, enabled, types, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankAccountsApiFactory = BankAccountsApiFactory;
/**
 * BankAccountsApi - object-oriented interface
 * @export
 * @class BankAccountsApi
 * @extends {BaseAPI}
 */
var BankAccountsApi = /** @class */ (function (_super) {
    __extends(BankAccountsApi, _super);
    function BankAccountsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerActivate = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerActivate(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {CreateOrUpdateBankAccountRequestDto} createOrUpdateBankAccountRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerCreateOrUpdate = function (createOrUpdateBankAccountRequestDto, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerCreateOrUpdate(createOrUpdateBankAccountRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerCreateWorkspaceBalanceReport = function (workspaceId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerCreateWorkspaceBalanceReport(workspaceId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerDisable = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerDisable(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankAccountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerGetById = function (bankAccountId, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerGetById(bankAccountId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankConnectionId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerListByBankConnectionId = function (bankConnectionId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerListByBankConnectionId(bankConnectionId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {string} [types]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApi
     */
    BankAccountsApi.prototype.bankAccountsControllerListByWorkspaceId = function (workspaceId, enabled, types, options) {
        var _this = this;
        return (0, exports.BankAccountsApiFp)(this.configuration).bankAccountsControllerListByWorkspaceId(workspaceId, enabled, types, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankAccountsApi;
}(base_1.BaseAPI));
exports.BankAccountsApi = BankAccountsApi;
/**
 * BankConnectionsApi - axios parameter creator
 * @export
 */
var BankConnectionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivate: function (bankConnectionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankConnectionId_1], args_1, true), void 0, function (bankConnectionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerActivate', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}/activate"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdate: function (workspaceId_1, createOrUpdateBankConnectionRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, createOrUpdateBankConnectionRequestDto_1], args_1, true), void 0, function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerCreateOrUpdate', 'workspaceId', workspaceId);
                    // verify required parameter 'createOrUpdateBankConnectionRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerCreateOrUpdate', 'createOrUpdateBankConnectionRequestDto', createOrUpdateBankConnectionRequestDto);
                    localVarPath = "/bank/workspaces/{workspaceId}/connections"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankConnectionRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisable: function (bankConnectionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankConnectionId_1], args_1, true), void 0, function (bankConnectionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerDisable', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}/disable"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetById: function (bankConnectionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankConnectionId_1], args_1, true), void 0, function (bankConnectionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankConnectionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerGetById', 'bankConnectionId', bankConnectionId);
                    localVarPath = "/bank/connections/{bankConnectionId}"
                        .replace("{".concat("bankConnectionId", "}"), encodeURIComponent(String(bankConnectionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerList: function (workspaceId_1, enabled_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, enabled_1], args_1, true), void 0, function (workspaceId, enabled, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankConnectionsControllerList', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/connections"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (enabled !== undefined) {
                        localVarQueryParameter['enabled'] = enabled;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankConnectionsApiAxiosParamCreator = BankConnectionsApiAxiosParamCreator;
/**
 * BankConnectionsApi - functional programming interface
 * @export
 */
var BankConnectionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankConnectionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivate: function (bankConnectionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerActivate(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerActivate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdate: function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerCreateOrUpdate(workspaceId, createOrUpdateBankConnectionRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerCreateOrUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisable: function (bankConnectionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerDisable(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerDisable']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetById: function (bankConnectionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerGetById(bankConnectionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerGetById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerList: function (workspaceId, enabled, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankConnectionsControllerList(workspaceId, enabled, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankConnectionsApi.bankConnectionsControllerList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankConnectionsApiFp = BankConnectionsApiFp;
/**
 * BankConnectionsApi - factory interface
 * @export
 */
var BankConnectionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankConnectionsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerActivate: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerActivate(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerCreateOrUpdate: function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
            return localVarFp.bankConnectionsControllerCreateOrUpdate(workspaceId, createOrUpdateBankConnectionRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerDisable: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerDisable(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankConnectionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerGetById: function (bankConnectionId, options) {
            return localVarFp.bankConnectionsControllerGetById(bankConnectionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [enabled]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankConnectionsControllerList: function (workspaceId, enabled, options) {
            return localVarFp.bankConnectionsControllerList(workspaceId, enabled, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankConnectionsApiFactory = BankConnectionsApiFactory;
/**
 * BankConnectionsApi - object-oriented interface
 * @export
 * @class BankConnectionsApi
 * @extends {BaseAPI}
 */
var BankConnectionsApi = /** @class */ (function (_super) {
    __extends(BankConnectionsApi, _super);
    function BankConnectionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerActivate = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerActivate(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateBankConnectionRequestDto} createOrUpdateBankConnectionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerCreateOrUpdate = function (workspaceId, createOrUpdateBankConnectionRequestDto, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerCreateOrUpdate(workspaceId, createOrUpdateBankConnectionRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerDisable = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerDisable(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerGetById = function (bankConnectionId, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerGetById(bankConnectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [enabled]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankConnectionsApi
     */
    BankConnectionsApi.prototype.bankConnectionsControllerList = function (workspaceId, enabled, options) {
        var _this = this;
        return (0, exports.BankConnectionsApiFp)(this.configuration).bankConnectionsControllerList(workspaceId, enabled, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankConnectionsApi;
}(base_1.BaseAPI));
exports.BankConnectionsApi = BankConnectionsApi;
/**
 * BankSyncApi - axios parameter creator
 * @export
 */
var BankSyncApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {SyncBankAccountTransactionsRequestDto} syncBankAccountTransactionsRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncAccountTransactions: function (syncBankAccountTransactionsRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([syncBankAccountTransactionsRequestDto_1], args_1, true), void 0, function (syncBankAccountTransactionsRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'syncBankAccountTransactionsRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankSyncControllerSyncAccountTransactions', 'syncBankAccountTransactionsRequestDto', syncBankAccountTransactionsRequestDto);
                    localVarPath = "/bank/sync/transactions";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(syncBankAccountTransactionsRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SyncBankItemRequestDto} syncBankItemRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncItem: function (syncBankItemRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([syncBankItemRequestDto_1], args_1, true), void 0, function (syncBankItemRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'syncBankItemRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankSyncControllerSyncItem', 'syncBankItemRequestDto', syncBankItemRequestDto);
                    localVarPath = "/bank/sync/items";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(syncBankItemRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SyncBankAccountTransactionsPageBeginRequestDto} syncBankAccountTransactionsPageBeginRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncTransactionsPageBegin: function (syncBankAccountTransactionsPageBeginRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([syncBankAccountTransactionsPageBeginRequestDto_1], args_1, true), void 0, function (syncBankAccountTransactionsPageBeginRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'syncBankAccountTransactionsPageBeginRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankSyncControllerSyncTransactionsPageBegin', 'syncBankAccountTransactionsPageBeginRequestDto', syncBankAccountTransactionsPageBeginRequestDto);
                    localVarPath = "/bank/sync/transactions/page/begin";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(syncBankAccountTransactionsPageBeginRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {SyncBankAccountTransactionsPageEndRequestDto} syncBankAccountTransactionsPageEndRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncTransactionsPageEnd: function (syncBankAccountTransactionsPageEndRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([syncBankAccountTransactionsPageEndRequestDto_1], args_1, true), void 0, function (syncBankAccountTransactionsPageEndRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'syncBankAccountTransactionsPageEndRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankSyncControllerSyncTransactionsPageEnd', 'syncBankAccountTransactionsPageEndRequestDto', syncBankAccountTransactionsPageEndRequestDto);
                    localVarPath = "/bank/sync/transactions/page/end";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(syncBankAccountTransactionsPageEndRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankSyncApiAxiosParamCreator = BankSyncApiAxiosParamCreator;
/**
 * BankSyncApi - functional programming interface
 * @export
 */
var BankSyncApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankSyncApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {SyncBankAccountTransactionsRequestDto} syncBankAccountTransactionsRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncAccountTransactions: function (syncBankAccountTransactionsRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankSyncControllerSyncAccountTransactions(syncBankAccountTransactionsRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankSyncApi.bankSyncControllerSyncAccountTransactions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SyncBankItemRequestDto} syncBankItemRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncItem: function (syncBankItemRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankSyncControllerSyncItem(syncBankItemRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankSyncApi.bankSyncControllerSyncItem']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SyncBankAccountTransactionsPageBeginRequestDto} syncBankAccountTransactionsPageBeginRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncTransactionsPageBegin: function (syncBankAccountTransactionsPageBeginRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankSyncControllerSyncTransactionsPageBegin(syncBankAccountTransactionsPageBeginRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankSyncApi.bankSyncControllerSyncTransactionsPageBegin']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SyncBankAccountTransactionsPageEndRequestDto} syncBankAccountTransactionsPageEndRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncTransactionsPageEnd: function (syncBankAccountTransactionsPageEndRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankSyncControllerSyncTransactionsPageEnd(syncBankAccountTransactionsPageEndRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankSyncApi.bankSyncControllerSyncTransactionsPageEnd']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankSyncApiFp = BankSyncApiFp;
/**
 * BankSyncApi - factory interface
 * @export
 */
var BankSyncApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankSyncApiFp)(configuration);
    return {
        /**
         *
         * @param {SyncBankAccountTransactionsRequestDto} syncBankAccountTransactionsRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncAccountTransactions: function (syncBankAccountTransactionsRequestDto, options) {
            return localVarFp.bankSyncControllerSyncAccountTransactions(syncBankAccountTransactionsRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SyncBankItemRequestDto} syncBankItemRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncItem: function (syncBankItemRequestDto, options) {
            return localVarFp.bankSyncControllerSyncItem(syncBankItemRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SyncBankAccountTransactionsPageBeginRequestDto} syncBankAccountTransactionsPageBeginRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncTransactionsPageBegin: function (syncBankAccountTransactionsPageBeginRequestDto, options) {
            return localVarFp.bankSyncControllerSyncTransactionsPageBegin(syncBankAccountTransactionsPageBeginRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SyncBankAccountTransactionsPageEndRequestDto} syncBankAccountTransactionsPageEndRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankSyncControllerSyncTransactionsPageEnd: function (syncBankAccountTransactionsPageEndRequestDto, options) {
            return localVarFp.bankSyncControllerSyncTransactionsPageEnd(syncBankAccountTransactionsPageEndRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankSyncApiFactory = BankSyncApiFactory;
/**
 * BankSyncApi - object-oriented interface
 * @export
 * @class BankSyncApi
 * @extends {BaseAPI}
 */
var BankSyncApi = /** @class */ (function (_super) {
    __extends(BankSyncApi, _super);
    function BankSyncApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {SyncBankAccountTransactionsRequestDto} syncBankAccountTransactionsRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankSyncApi
     */
    BankSyncApi.prototype.bankSyncControllerSyncAccountTransactions = function (syncBankAccountTransactionsRequestDto, options) {
        var _this = this;
        return (0, exports.BankSyncApiFp)(this.configuration).bankSyncControllerSyncAccountTransactions(syncBankAccountTransactionsRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SyncBankItemRequestDto} syncBankItemRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankSyncApi
     */
    BankSyncApi.prototype.bankSyncControllerSyncItem = function (syncBankItemRequestDto, options) {
        var _this = this;
        return (0, exports.BankSyncApiFp)(this.configuration).bankSyncControllerSyncItem(syncBankItemRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SyncBankAccountTransactionsPageBeginRequestDto} syncBankAccountTransactionsPageBeginRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankSyncApi
     */
    BankSyncApi.prototype.bankSyncControllerSyncTransactionsPageBegin = function (syncBankAccountTransactionsPageBeginRequestDto, options) {
        var _this = this;
        return (0, exports.BankSyncApiFp)(this.configuration).bankSyncControllerSyncTransactionsPageBegin(syncBankAccountTransactionsPageBeginRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SyncBankAccountTransactionsPageEndRequestDto} syncBankAccountTransactionsPageEndRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankSyncApi
     */
    BankSyncApi.prototype.bankSyncControllerSyncTransactionsPageEnd = function (syncBankAccountTransactionsPageEndRequestDto, options) {
        var _this = this;
        return (0, exports.BankSyncApiFp)(this.configuration).bankSyncControllerSyncTransactionsPageEnd(syncBankAccountTransactionsPageEndRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankSyncApi;
}(base_1.BaseAPI));
exports.BankSyncApi = BankSyncApi;
/**
 * BankTransactionCategoriesApi - axios parameter creator
 * @export
 */
var BankTransactionCategoriesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {string} [directionNatures]
         * @param {string} [legalNatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerList: function (workspaceId_1, onlyLeafs_1, directionNatures_1, legalNatures_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, onlyLeafs_1, directionNatures_1, legalNatures_1], args_1, true), void 0, function (workspaceId, onlyLeafs, directionNatures, legalNatures, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionCategoriesControllerList', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/transaction-categories"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (onlyLeafs !== undefined) {
                        localVarQueryParameter['onlyLeafs'] = onlyLeafs;
                    }
                    if (directionNatures !== undefined) {
                        localVarQueryParameter['directionNatures'] = directionNatures;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionCategoriesApiAxiosParamCreator = BankTransactionCategoriesApiAxiosParamCreator;
/**
 * BankTransactionCategoriesApi - functional programming interface
 * @export
 */
var BankTransactionCategoriesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionCategoriesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {string} [directionNatures]
         * @param {string} [legalNatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerList: function (workspaceId, onlyLeafs, directionNatures, legalNatures, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionCategoriesControllerList(workspaceId, onlyLeafs, directionNatures, legalNatures, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionCategoriesApi.bankTransactionCategoriesControllerList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionCategoriesApiFp = BankTransactionCategoriesApiFp;
/**
 * BankTransactionCategoriesApi - factory interface
 * @export
 */
var BankTransactionCategoriesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionCategoriesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {boolean} [onlyLeafs]
         * @param {string} [directionNatures]
         * @param {string} [legalNatures]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionCategoriesControllerList: function (workspaceId, onlyLeafs, directionNatures, legalNatures, options) {
            return localVarFp.bankTransactionCategoriesControllerList(workspaceId, onlyLeafs, directionNatures, legalNatures, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionCategoriesApiFactory = BankTransactionCategoriesApiFactory;
/**
 * BankTransactionCategoriesApi - object-oriented interface
 * @export
 * @class BankTransactionCategoriesApi
 * @extends {BaseAPI}
 */
var BankTransactionCategoriesApi = /** @class */ (function (_super) {
    __extends(BankTransactionCategoriesApi, _super);
    function BankTransactionCategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {boolean} [onlyLeafs]
     * @param {string} [directionNatures]
     * @param {string} [legalNatures]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionCategoriesApi
     */
    BankTransactionCategoriesApi.prototype.bankTransactionCategoriesControllerList = function (workspaceId, onlyLeafs, directionNatures, legalNatures, options) {
        var _this = this;
        return (0, exports.BankTransactionCategoriesApiFp)(this.configuration).bankTransactionCategoriesControllerList(workspaceId, onlyLeafs, directionNatures, legalNatures, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionCategoriesApi;
}(base_1.BaseAPI));
exports.BankTransactionCategoriesApi = BankTransactionCategoriesApi;
/**
 * BankTransactionTagsApi - axios parameter creator
 * @export
 */
var BankTransactionTagsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerCreate: function (workspaceId_1, createBankTransactionTagRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, createBankTransactionTagRequestDto_1], args_1, true), void 0, function (workspaceId, createBankTransactionTagRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionTagsControllerCreate', 'workspaceId', workspaceId);
                    // verify required parameter 'createBankTransactionTagRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionTagsControllerCreate', 'createBankTransactionTagRequestDto', createBankTransactionTagRequestDto);
                    localVarPath = "/bank/workspaces/{workspaceId}/transaction-tags"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createBankTransactionTagRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerList: function (workspaceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1], args_1, true), void 0, function (workspaceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionTagsControllerList', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/transaction-tags"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionTagsApiAxiosParamCreator = BankTransactionTagsApiAxiosParamCreator;
/**
 * BankTransactionTagsApi - functional programming interface
 * @export
 */
var BankTransactionTagsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionTagsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerCreate: function (workspaceId, createBankTransactionTagRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionTagsControllerCreate(workspaceId, createBankTransactionTagRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionTagsApi.bankTransactionTagsControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerList: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionTagsControllerList(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionTagsApi.bankTransactionTagsControllerList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionTagsApiFp = BankTransactionTagsApiFp;
/**
 * BankTransactionTagsApi - factory interface
 * @export
 */
var BankTransactionTagsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionTagsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerCreate: function (workspaceId, createBankTransactionTagRequestDto, options) {
            return localVarFp.bankTransactionTagsControllerCreate(workspaceId, createBankTransactionTagRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionTagsControllerList: function (workspaceId, options) {
            return localVarFp.bankTransactionTagsControllerList(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionTagsApiFactory = BankTransactionTagsApiFactory;
/**
 * BankTransactionTagsApi - object-oriented interface
 * @export
 * @class BankTransactionTagsApi
 * @extends {BaseAPI}
 */
var BankTransactionTagsApi = /** @class */ (function (_super) {
    __extends(BankTransactionTagsApi, _super);
    function BankTransactionTagsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {CreateBankTransactionTagRequestDto} createBankTransactionTagRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionTagsApi
     */
    BankTransactionTagsApi.prototype.bankTransactionTagsControllerCreate = function (workspaceId, createBankTransactionTagRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionTagsApiFp)(this.configuration).bankTransactionTagsControllerCreate(workspaceId, createBankTransactionTagRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionTagsApi
     */
    BankTransactionTagsApi.prototype.bankTransactionTagsControllerList = function (workspaceId, options) {
        var _this = this;
        return (0, exports.BankTransactionTagsApiFp)(this.configuration).bankTransactionTagsControllerList(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionTagsApi;
}(base_1.BaseAPI));
exports.BankTransactionTagsApi = BankTransactionTagsApi;
/**
 * BankTransactionsApi - axios parameter creator
 * @export
 */
var BankTransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createOrUpdateBankTransactionsInBulkRequestDto_1], args_1, true), void 0, function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createOrUpdateBankTransactionsInBulkRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerCreateOrUpdateInBulk', 'createOrUpdateBankTransactionsInBulkRequestDto', createOrUpdateBankTransactionsInBulkRequestDto);
                    localVarPath = "/bank/transactions/bulk";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateBankTransactionsInBulkRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetById: function (bankTransactionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankTransactionId_1], args_1, true), void 0, function (bankTransactionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankTransactionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetById', 'bankTransactionId', bankTransactionId);
                    localVarPath = "/bank/transactions/{bankTransactionId}"
                        .replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(bankTransactionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} accountId
         * @param {string} provider
         * @param {string} providerTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetByProvider: function (accountId_1, provider_1, providerTransactionId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([accountId_1, provider_1, providerTransactionId_1], args_1, true), void 0, function (accountId, provider, providerTransactionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'accountId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetByProvider', 'accountId', accountId);
                    // verify required parameter 'provider' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetByProvider', 'provider', provider);
                    // verify required parameter 'providerTransactionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetByProvider', 'providerTransactionId', providerTransactionId);
                    localVarPath = "/bank/accounts/{accountId}/transactions/by-provider"
                        .replace("{".concat("accountId", "}"), encodeURIComponent(String(accountId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (provider !== undefined) {
                        localVarQueryParameter['provider'] = provider;
                    }
                    if (providerTransactionId !== undefined) {
                        localVarQueryParameter['providerTransactionId'] = providerTransactionId;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [directionNatures]
         * @param {string} [minPostedDatetime]
         * @param {string} [maxPostedDatetime]
         * @param {string} [minCompetencyDatetime]
         * @param {string} [maxCompetencyDatetime]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [considerAutomaticApplicationRelated]
         * @param {boolean} [considerInternalTransfers]
         * @param {boolean} [considerInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTotals: function (workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, directionNatures_1, minPostedDatetime_1, maxPostedDatetime_1, minCompetencyDatetime_1, maxCompetencyDatetime_1, considerIgnored_1, considerAutomaticApplicationRelated_1, considerInternalTransfers_1, considerInvoiceRelated_1) {
            var args_1 = [];
            for (var _i = 14; _i < arguments.length; _i++) {
                args_1[_i - 14] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, directionNatures_1, minPostedDatetime_1, maxPostedDatetime_1, minCompetencyDatetime_1, maxCompetencyDatetime_1, considerIgnored_1, considerAutomaticApplicationRelated_1, considerInternalTransfers_1, considerInvoiceRelated_1], args_1, true), void 0, function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerGetTotals', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/transactions/totals"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (directionNatures !== undefined) {
                        localVarQueryParameter['directionNatures'] = directionNatures;
                    }
                    if (minPostedDatetime !== undefined) {
                        localVarQueryParameter['minPostedDatetime'] = minPostedDatetime;
                    }
                    if (maxPostedDatetime !== undefined) {
                        localVarQueryParameter['maxPostedDatetime'] = maxPostedDatetime;
                    }
                    if (minCompetencyDatetime !== undefined) {
                        localVarQueryParameter['minCompetencyDatetime'] = minCompetencyDatetime;
                    }
                    if (maxCompetencyDatetime !== undefined) {
                        localVarQueryParameter['maxCompetencyDatetime'] = maxCompetencyDatetime;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (considerAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['considerAutomaticApplicationRelated'] = considerAutomaticApplicationRelated;
                    }
                    if (considerInternalTransfers !== undefined) {
                        localVarQueryParameter['considerInternalTransfers'] = considerInternalTransfers;
                    }
                    if (considerInvoiceRelated !== undefined) {
                        localVarQueryParameter['considerInvoiceRelated'] = considerInvoiceRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [directionNatures]
         * @param {string} [minPostedDatetime]
         * @param {string} [maxPostedDatetime]
         * @param {string} [minCompetencyDatetime]
         * @param {string} [maxCompetencyDatetime]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [considerAutomaticApplicationRelated]
         * @param {boolean} [considerInternalTransfers]
         * @param {boolean} [considerInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerList: function (workspaceId_1, pageIndex_1, pageSize_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, directionNatures_1, minPostedDatetime_1, maxPostedDatetime_1, minCompetencyDatetime_1, maxCompetencyDatetime_1, considerIgnored_1, considerAutomaticApplicationRelated_1, considerInternalTransfers_1, considerInvoiceRelated_1) {
            var args_1 = [];
            for (var _i = 16; _i < arguments.length; _i++) {
                args_1[_i - 16] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, pageIndex_1, pageSize_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, directionNatures_1, minPostedDatetime_1, maxPostedDatetime_1, minCompetencyDatetime_1, maxCompetencyDatetime_1, considerIgnored_1, considerAutomaticApplicationRelated_1, considerInternalTransfers_1, considerInvoiceRelated_1], args_1, true), void 0, function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerList', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/transactions"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (pageIndex !== undefined) {
                        localVarQueryParameter['pageIndex'] = pageIndex;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (directionNatures !== undefined) {
                        localVarQueryParameter['directionNatures'] = directionNatures;
                    }
                    if (minPostedDatetime !== undefined) {
                        localVarQueryParameter['minPostedDatetime'] = minPostedDatetime;
                    }
                    if (maxPostedDatetime !== undefined) {
                        localVarQueryParameter['maxPostedDatetime'] = maxPostedDatetime;
                    }
                    if (minCompetencyDatetime !== undefined) {
                        localVarQueryParameter['minCompetencyDatetime'] = minCompetencyDatetime;
                    }
                    if (maxCompetencyDatetime !== undefined) {
                        localVarQueryParameter['maxCompetencyDatetime'] = maxCompetencyDatetime;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (considerAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['considerAutomaticApplicationRelated'] = considerAutomaticApplicationRelated;
                    }
                    if (considerInternalTransfers !== undefined) {
                        localVarQueryParameter['considerInternalTransfers'] = considerInternalTransfers;
                    }
                    if (considerInvoiceRelated !== undefined) {
                        localVarQueryParameter['considerInvoiceRelated'] = considerInvoiceRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListMostRecent: function (workspaceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1], args_1, true), void 0, function (workspaceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerListMostRecent', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/transactions/most-recent"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {boolean} [considerIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListNotVerified: function (workspaceId_1, pageIndex_1, pageSize_1, considerIgnored_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, pageIndex_1, pageSize_1, considerIgnored_1], args_1, true), void 0, function (workspaceId, pageIndex, pageSize, considerIgnored, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerListNotVerified', 'workspaceId', workspaceId);
                    localVarPath = "/bank/workspaces/{workspaceId}/transactions/not-verified"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (pageIndex !== undefined) {
                        localVarQueryParameter['pageIndex'] = pageIndex;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} fromDatetime
         * @param {string} toDatetime
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListVerifiedByMe: function (workspaceId_1, fromDatetime_1, toDatetime_1, pageIndex_1, pageSize_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, fromDatetime_1, toDatetime_1, pageIndex_1, pageSize_1], args_1, true), void 0, function (workspaceId, fromDatetime, toDatetime, pageIndex, pageSize, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerListVerifiedByMe', 'workspaceId', workspaceId);
                    // verify required parameter 'fromDatetime' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerListVerifiedByMe', 'fromDatetime', fromDatetime);
                    // verify required parameter 'toDatetime' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerListVerifiedByMe', 'toDatetime', toDatetime);
                    localVarPath = "/bank/workspaces/{workspaceId}/transactions/verified-by-me"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (fromDatetime !== undefined) {
                        localVarQueryParameter['fromDatetime'] = fromDatetime;
                    }
                    if (toDatetime !== undefined) {
                        localVarQueryParameter['toDatetime'] = toDatetime;
                    }
                    if (pageIndex !== undefined) {
                        localVarQueryParameter['pageIndex'] = pageIndex;
                    }
                    if (pageSize !== undefined) {
                        localVarQueryParameter['pageSize'] = pageSize;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {PartialUpdateBankTransactionRequestDto} partialUpdateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerPartialUpdate: function (bankTransactionId_1, partialUpdateBankTransactionRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([bankTransactionId_1, partialUpdateBankTransactionRequestDto_1], args_1, true), void 0, function (bankTransactionId, partialUpdateBankTransactionRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'bankTransactionId' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerPartialUpdate', 'bankTransactionId', bankTransactionId);
                    // verify required parameter 'partialUpdateBankTransactionRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsControllerPartialUpdate', 'partialUpdateBankTransactionRequestDto', partialUpdateBankTransactionRequestDto);
                    localVarPath = "/bank/transactions/{bankTransactionId}"
                        .replace("{".concat("bankTransactionId", "}"), encodeURIComponent(String(bankTransactionId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(partialUpdateBankTransactionRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionsApiAxiosParamCreator = BankTransactionsApiAxiosParamCreator;
/**
 * BankTransactionsApi - functional programming interface
 * @export
 */
var BankTransactionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerCreateOrUpdateInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerCreateOrUpdateInBulk']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetById: function (bankTransactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetById(bankTransactionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} accountId
         * @param {string} provider
         * @param {string} providerTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetByProvider: function (accountId, provider, providerTransactionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetByProvider(accountId, provider, providerTransactionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetByProvider']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [directionNatures]
         * @param {string} [minPostedDatetime]
         * @param {string} [maxPostedDatetime]
         * @param {string} [minCompetencyDatetime]
         * @param {string} [maxCompetencyDatetime]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [considerAutomaticApplicationRelated]
         * @param {boolean} [considerInternalTransfers]
         * @param {boolean} [considerInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTotals: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerGetTotals(workspaceId, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerGetTotals']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [directionNatures]
         * @param {string} [minPostedDatetime]
         * @param {string} [maxPostedDatetime]
         * @param {string} [minCompetencyDatetime]
         * @param {string} [maxCompetencyDatetime]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [considerAutomaticApplicationRelated]
         * @param {boolean} [considerInternalTransfers]
         * @param {boolean} [considerInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerList: function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerList(workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListMostRecent: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerListMostRecent(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerListMostRecent']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {boolean} [considerIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListNotVerified: function (workspaceId, pageIndex, pageSize, considerIgnored, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerListNotVerified(workspaceId, pageIndex, pageSize, considerIgnored, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerListNotVerified']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} fromDatetime
         * @param {string} toDatetime
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListVerifiedByMe: function (workspaceId, fromDatetime, toDatetime, pageIndex, pageSize, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerListVerifiedByMe(workspaceId, fromDatetime, toDatetime, pageIndex, pageSize, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerListVerifiedByMe']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {PartialUpdateBankTransactionRequestDto} partialUpdateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerPartialUpdate: function (bankTransactionId, partialUpdateBankTransactionRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsControllerPartialUpdate(bankTransactionId, partialUpdateBankTransactionRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsApi.bankTransactionsControllerPartialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionsApiFp = BankTransactionsApiFp;
/**
 * BankTransactionsApi - factory interface
 * @export
 */
var BankTransactionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionsApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerCreateOrUpdateInBulk: function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
            return localVarFp.bankTransactionsControllerCreateOrUpdateInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetById: function (bankTransactionId, options) {
            return localVarFp.bankTransactionsControllerGetById(bankTransactionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} accountId
         * @param {string} provider
         * @param {string} providerTransactionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetByProvider: function (accountId, provider, providerTransactionId, options) {
            return localVarFp.bankTransactionsControllerGetByProvider(accountId, provider, providerTransactionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [directionNatures]
         * @param {string} [minPostedDatetime]
         * @param {string} [maxPostedDatetime]
         * @param {string} [minCompetencyDatetime]
         * @param {string} [maxCompetencyDatetime]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [considerAutomaticApplicationRelated]
         * @param {boolean} [considerInternalTransfers]
         * @param {boolean} [considerInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerGetTotals: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options) {
            return localVarFp.bankTransactionsControllerGetTotals(workspaceId, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {string} [directionNatures]
         * @param {string} [minPostedDatetime]
         * @param {string} [maxPostedDatetime]
         * @param {string} [minCompetencyDatetime]
         * @param {string} [maxCompetencyDatetime]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [considerAutomaticApplicationRelated]
         * @param {boolean} [considerInternalTransfers]
         * @param {boolean} [considerInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerList: function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options) {
            return localVarFp.bankTransactionsControllerList(workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListMostRecent: function (workspaceId, options) {
            return localVarFp.bankTransactionsControllerListMostRecent(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {boolean} [considerIgnored]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListNotVerified: function (workspaceId, pageIndex, pageSize, considerIgnored, options) {
            return localVarFp.bankTransactionsControllerListNotVerified(workspaceId, pageIndex, pageSize, considerIgnored, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} fromDatetime
         * @param {string} toDatetime
         * @param {number} [pageIndex]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerListVerifiedByMe: function (workspaceId, fromDatetime, toDatetime, pageIndex, pageSize, options) {
            return localVarFp.bankTransactionsControllerListVerifiedByMe(workspaceId, fromDatetime, toDatetime, pageIndex, pageSize, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} bankTransactionId
         * @param {PartialUpdateBankTransactionRequestDto} partialUpdateBankTransactionRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsControllerPartialUpdate: function (bankTransactionId, partialUpdateBankTransactionRequestDto, options) {
            return localVarFp.bankTransactionsControllerPartialUpdate(bankTransactionId, partialUpdateBankTransactionRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionsApiFactory = BankTransactionsApiFactory;
/**
 * BankTransactionsApi - object-oriented interface
 * @export
 * @class BankTransactionsApi
 * @extends {BaseAPI}
 */
var BankTransactionsApi = /** @class */ (function (_super) {
    __extends(BankTransactionsApi, _super);
    function BankTransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateOrUpdateBankTransactionsInBulkRequestDto} createOrUpdateBankTransactionsInBulkRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerCreateOrUpdateInBulk = function (createOrUpdateBankTransactionsInBulkRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerCreateOrUpdateInBulk(createOrUpdateBankTransactionsInBulkRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetById = function (bankTransactionId, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetById(bankTransactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} accountId
     * @param {string} provider
     * @param {string} providerTransactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetByProvider = function (accountId, provider, providerTransactionId, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetByProvider(accountId, provider, providerTransactionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [directionNatures]
     * @param {string} [minPostedDatetime]
     * @param {string} [maxPostedDatetime]
     * @param {string} [minCompetencyDatetime]
     * @param {string} [maxCompetencyDatetime]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [considerAutomaticApplicationRelated]
     * @param {boolean} [considerInternalTransfers]
     * @param {boolean} [considerInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerGetTotals = function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerGetTotals(workspaceId, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {string} [directionNatures]
     * @param {string} [minPostedDatetime]
     * @param {string} [maxPostedDatetime]
     * @param {string} [minCompetencyDatetime]
     * @param {string} [maxCompetencyDatetime]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [considerAutomaticApplicationRelated]
     * @param {boolean} [considerInternalTransfers]
     * @param {boolean} [considerInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerList = function (workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerList(workspaceId, pageIndex, pageSize, accountIds, categoryIds, tagIds, legalNatures, directionNatures, minPostedDatetime, maxPostedDatetime, minCompetencyDatetime, maxCompetencyDatetime, considerIgnored, considerAutomaticApplicationRelated, considerInternalTransfers, considerInvoiceRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerListMostRecent = function (workspaceId, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerListMostRecent(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {boolean} [considerIgnored]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerListNotVerified = function (workspaceId, pageIndex, pageSize, considerIgnored, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerListNotVerified(workspaceId, pageIndex, pageSize, considerIgnored, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} fromDatetime
     * @param {string} toDatetime
     * @param {number} [pageIndex]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerListVerifiedByMe = function (workspaceId, fromDatetime, toDatetime, pageIndex, pageSize, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerListVerifiedByMe(workspaceId, fromDatetime, toDatetime, pageIndex, pageSize, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} bankTransactionId
     * @param {PartialUpdateBankTransactionRequestDto} partialUpdateBankTransactionRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsApi
     */
    BankTransactionsApi.prototype.bankTransactionsControllerPartialUpdate = function (bankTransactionId, partialUpdateBankTransactionRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionsApiFp)(this.configuration).bankTransactionsControllerPartialUpdate(bankTransactionId, partialUpdateBankTransactionRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionsApi;
}(base_1.BaseAPI));
exports.BankTransactionsApi = BankTransactionsApi;
/**
 * BankTransactionsPageCategoryAssignerApi - axios parameter creator
 * @export
 */
var BankTransactionsPageCategoryAssignerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {AssignCategoryForBankTransactionsPageRequestDto} assignCategoryForBankTransactionsPageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsPageCategoryAssignerControllerAssign: function (assignCategoryForBankTransactionsPageRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([assignCategoryForBankTransactionsPageRequestDto_1], args_1, true), void 0, function (assignCategoryForBankTransactionsPageRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'assignCategoryForBankTransactionsPageRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsPageCategoryAssignerControllerAssign', 'assignCategoryForBankTransactionsPageRequestDto', assignCategoryForBankTransactionsPageRequestDto);
                    localVarPath = "/bank/transactions/page/category/assign";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(assignCategoryForBankTransactionsPageRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionsPageCategoryAssignerApiAxiosParamCreator = BankTransactionsPageCategoryAssignerApiAxiosParamCreator;
/**
 * BankTransactionsPageCategoryAssignerApi - functional programming interface
 * @export
 */
var BankTransactionsPageCategoryAssignerApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionsPageCategoryAssignerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {AssignCategoryForBankTransactionsPageRequestDto} assignCategoryForBankTransactionsPageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsPageCategoryAssignerControllerAssign: function (assignCategoryForBankTransactionsPageRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsPageCategoryAssignerControllerAssign(assignCategoryForBankTransactionsPageRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsPageCategoryAssignerApi.bankTransactionsPageCategoryAssignerControllerAssign']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionsPageCategoryAssignerApiFp = BankTransactionsPageCategoryAssignerApiFp;
/**
 * BankTransactionsPageCategoryAssignerApi - factory interface
 * @export
 */
var BankTransactionsPageCategoryAssignerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionsPageCategoryAssignerApiFp)(configuration);
    return {
        /**
         *
         * @param {AssignCategoryForBankTransactionsPageRequestDto} assignCategoryForBankTransactionsPageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsPageCategoryAssignerControllerAssign: function (assignCategoryForBankTransactionsPageRequestDto, options) {
            return localVarFp.bankTransactionsPageCategoryAssignerControllerAssign(assignCategoryForBankTransactionsPageRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionsPageCategoryAssignerApiFactory = BankTransactionsPageCategoryAssignerApiFactory;
/**
 * BankTransactionsPageCategoryAssignerApi - object-oriented interface
 * @export
 * @class BankTransactionsPageCategoryAssignerApi
 * @extends {BaseAPI}
 */
var BankTransactionsPageCategoryAssignerApi = /** @class */ (function (_super) {
    __extends(BankTransactionsPageCategoryAssignerApi, _super);
    function BankTransactionsPageCategoryAssignerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {AssignCategoryForBankTransactionsPageRequestDto} assignCategoryForBankTransactionsPageRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsPageCategoryAssignerApi
     */
    BankTransactionsPageCategoryAssignerApi.prototype.bankTransactionsPageCategoryAssignerControllerAssign = function (assignCategoryForBankTransactionsPageRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionsPageCategoryAssignerApiFp)(this.configuration).bankTransactionsPageCategoryAssignerControllerAssign(assignCategoryForBankTransactionsPageRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionsPageCategoryAssignerApi;
}(base_1.BaseAPI));
exports.BankTransactionsPageCategoryAssignerApi = BankTransactionsPageCategoryAssignerApi;
/**
 * BankTransactionsPageLegalNatureAssignerApi - axios parameter creator
 * @export
 */
var BankTransactionsPageLegalNatureAssignerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {AssignLegalNatureForBankTransactionsPageRequestDto} assignLegalNatureForBankTransactionsPageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsPageLegalNatureAssignerControllerAssign: function (assignLegalNatureForBankTransactionsPageRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([assignLegalNatureForBankTransactionsPageRequestDto_1], args_1, true), void 0, function (assignLegalNatureForBankTransactionsPageRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'assignLegalNatureForBankTransactionsPageRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('bankTransactionsPageLegalNatureAssignerControllerAssign', 'assignLegalNatureForBankTransactionsPageRequestDto', assignLegalNatureForBankTransactionsPageRequestDto);
                    localVarPath = "/bank/transactions/page/legal-nature/assign";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(assignLegalNatureForBankTransactionsPageRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankTransactionsPageLegalNatureAssignerApiAxiosParamCreator = BankTransactionsPageLegalNatureAssignerApiAxiosParamCreator;
/**
 * BankTransactionsPageLegalNatureAssignerApi - functional programming interface
 * @export
 */
var BankTransactionsPageLegalNatureAssignerApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankTransactionsPageLegalNatureAssignerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {AssignLegalNatureForBankTransactionsPageRequestDto} assignLegalNatureForBankTransactionsPageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsPageLegalNatureAssignerControllerAssign: function (assignLegalNatureForBankTransactionsPageRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTransactionsPageLegalNatureAssignerControllerAssign(assignLegalNatureForBankTransactionsPageRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BankTransactionsPageLegalNatureAssignerApi.bankTransactionsPageLegalNatureAssignerControllerAssign']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.BankTransactionsPageLegalNatureAssignerApiFp = BankTransactionsPageLegalNatureAssignerApiFp;
/**
 * BankTransactionsPageLegalNatureAssignerApi - factory interface
 * @export
 */
var BankTransactionsPageLegalNatureAssignerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankTransactionsPageLegalNatureAssignerApiFp)(configuration);
    return {
        /**
         *
         * @param {AssignLegalNatureForBankTransactionsPageRequestDto} assignLegalNatureForBankTransactionsPageRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransactionsPageLegalNatureAssignerControllerAssign: function (assignLegalNatureForBankTransactionsPageRequestDto, options) {
            return localVarFp.bankTransactionsPageLegalNatureAssignerControllerAssign(assignLegalNatureForBankTransactionsPageRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankTransactionsPageLegalNatureAssignerApiFactory = BankTransactionsPageLegalNatureAssignerApiFactory;
/**
 * BankTransactionsPageLegalNatureAssignerApi - object-oriented interface
 * @export
 * @class BankTransactionsPageLegalNatureAssignerApi
 * @extends {BaseAPI}
 */
var BankTransactionsPageLegalNatureAssignerApi = /** @class */ (function (_super) {
    __extends(BankTransactionsPageLegalNatureAssignerApi, _super);
    function BankTransactionsPageLegalNatureAssignerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {AssignLegalNatureForBankTransactionsPageRequestDto} assignLegalNatureForBankTransactionsPageRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransactionsPageLegalNatureAssignerApi
     */
    BankTransactionsPageLegalNatureAssignerApi.prototype.bankTransactionsPageLegalNatureAssignerControllerAssign = function (assignLegalNatureForBankTransactionsPageRequestDto, options) {
        var _this = this;
        return (0, exports.BankTransactionsPageLegalNatureAssignerApiFp)(this.configuration).bankTransactionsPageLegalNatureAssignerControllerAssign(assignLegalNatureForBankTransactionsPageRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankTransactionsPageLegalNatureAssignerApi;
}(base_1.BaseAPI));
exports.BankTransactionsPageLegalNatureAssignerApi = BankTransactionsPageLegalNatureAssignerApi;
/**
 * HelloApi - axios parameter creator
 * @export
 */
var HelloApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloControllerHello: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/hello";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.HelloApiAxiosParamCreator = HelloApiAxiosParamCreator;
/**
 * HelloApi - functional programming interface
 * @export
 */
var HelloApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.HelloApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloControllerHello: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.helloControllerHello(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['HelloApi.helloControllerHello']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.HelloApiFp = HelloApiFp;
/**
 * HelloApi - factory interface
 * @export
 */
var HelloApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.HelloApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloControllerHello: function (options) {
            return localVarFp.helloControllerHello(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.HelloApiFactory = HelloApiFactory;
/**
 * HelloApi - object-oriented interface
 * @export
 * @class HelloApi
 * @extends {BaseAPI}
 */
var HelloApi = /** @class */ (function (_super) {
    __extends(HelloApi, _super);
    function HelloApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelloApi
     */
    HelloApi.prototype.helloControllerHello = function (options) {
        var _this = this;
        return (0, exports.HelloApiFp)(this.configuration).helloControllerHello(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return HelloApi;
}(base_1.BaseAPI));
exports.HelloApi = HelloApi;
/**
 * MessageTokensApi - axios parameter creator
 * @export
 */
var MessageTokensApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerCreateOrUpdate: function (workspaceId_1, createOrUpdateMessageTokenRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, createOrUpdateMessageTokenRequestDto_1], args_1, true), void 0, function (workspaceId, createOrUpdateMessageTokenRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('messageTokensControllerCreateOrUpdate', 'workspaceId', workspaceId);
                    // verify required parameter 'createOrUpdateMessageTokenRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('messageTokensControllerCreateOrUpdate', 'createOrUpdateMessageTokenRequestDto', createOrUpdateMessageTokenRequestDto);
                    localVarPath = "/communication/workspaces/{workspaceId}/message-tokens"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrUpdateMessageTokenRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerListByWorkspaceId: function (workspaceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1], args_1, true), void 0, function (workspaceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('messageTokensControllerListByWorkspaceId', 'workspaceId', workspaceId);
                    localVarPath = "/communication/workspaces/{workspaceId}/message-tokens"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.MessageTokensApiAxiosParamCreator = MessageTokensApiAxiosParamCreator;
/**
 * MessageTokensApi - functional programming interface
 * @export
 */
var MessageTokensApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MessageTokensApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerCreateOrUpdate: function (workspaceId, createOrUpdateMessageTokenRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.messageTokensControllerCreateOrUpdate(workspaceId, createOrUpdateMessageTokenRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MessageTokensApi.messageTokensControllerCreateOrUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerListByWorkspaceId: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.messageTokensControllerListByWorkspaceId(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MessageTokensApi.messageTokensControllerListByWorkspaceId']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.MessageTokensApiFp = MessageTokensApiFp;
/**
 * MessageTokensApi - factory interface
 * @export
 */
var MessageTokensApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MessageTokensApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerCreateOrUpdate: function (workspaceId, createOrUpdateMessageTokenRequestDto, options) {
            return localVarFp.messageTokensControllerCreateOrUpdate(workspaceId, createOrUpdateMessageTokenRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageTokensControllerListByWorkspaceId: function (workspaceId, options) {
            return localVarFp.messageTokensControllerListByWorkspaceId(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MessageTokensApiFactory = MessageTokensApiFactory;
/**
 * MessageTokensApi - object-oriented interface
 * @export
 * @class MessageTokensApi
 * @extends {BaseAPI}
 */
var MessageTokensApi = /** @class */ (function (_super) {
    __extends(MessageTokensApi, _super);
    function MessageTokensApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {CreateOrUpdateMessageTokenRequestDto} createOrUpdateMessageTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTokensApi
     */
    MessageTokensApi.prototype.messageTokensControllerCreateOrUpdate = function (workspaceId, createOrUpdateMessageTokenRequestDto, options) {
        var _this = this;
        return (0, exports.MessageTokensApiFp)(this.configuration).messageTokensControllerCreateOrUpdate(workspaceId, createOrUpdateMessageTokenRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTokensApi
     */
    MessageTokensApi.prototype.messageTokensControllerListByWorkspaceId = function (workspaceId, options) {
        var _this = this;
        return (0, exports.MessageTokensApiFp)(this.configuration).messageTokensControllerListByWorkspaceId(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MessageTokensApi;
}(base_1.BaseAPI));
exports.MessageTokensApi = MessageTokensApi;
/**
 * PluggyApi - axios parameter creator
 * @export
 */
var PluggyApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreateConnectToken: function (createPluggyConnectTokenRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createPluggyConnectTokenRequestDto_1], args_1, true), void 0, function (createPluggyConnectTokenRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createPluggyConnectTokenRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('pluggyControllerCreateConnectToken', 'createPluggyConnectTokenRequestDto', createPluggyConnectTokenRequestDto);
                    localVarPath = "/pluggy/connect-tokens";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPluggyConnectTokenRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/pluggy/webhook";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.PluggyApiAxiosParamCreator = PluggyApiAxiosParamCreator;
/**
 * PluggyApi - functional programming interface
 * @export
 */
var PluggyApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PluggyApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreateConnectToken: function (createPluggyConnectTokenRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pluggyControllerCreateConnectToken(createPluggyConnectTokenRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PluggyApi.pluggyControllerCreateConnectToken']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pluggyControllerWebhook(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['PluggyApi.pluggyControllerWebhook']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PluggyApiFp = PluggyApiFp;
/**
 * PluggyApi - factory interface
 * @export
 */
var PluggyApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PluggyApiFp)(configuration);
    return {
        /**
         *
         * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerCreateConnectToken: function (createPluggyConnectTokenRequestDto, options) {
            return localVarFp.pluggyControllerCreateConnectToken(createPluggyConnectTokenRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluggyControllerWebhook: function (options) {
            return localVarFp.pluggyControllerWebhook(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PluggyApiFactory = PluggyApiFactory;
/**
 * PluggyApi - object-oriented interface
 * @export
 * @class PluggyApi
 * @extends {BaseAPI}
 */
var PluggyApi = /** @class */ (function (_super) {
    __extends(PluggyApi, _super);
    function PluggyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreatePluggyConnectTokenRequestDto} createPluggyConnectTokenRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    PluggyApi.prototype.pluggyControllerCreateConnectToken = function (createPluggyConnectTokenRequestDto, options) {
        var _this = this;
        return (0, exports.PluggyApiFp)(this.configuration).pluggyControllerCreateConnectToken(createPluggyConnectTokenRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluggyApi
     */
    PluggyApi.prototype.pluggyControllerWebhook = function (options) {
        var _this = this;
        return (0, exports.PluggyApiFp)(this.configuration).pluggyControllerWebhook(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PluggyApi;
}(base_1.BaseAPI));
exports.PluggyApi = PluggyApi;
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
var ProfilesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createProfileRequestDto_1], args_1, true), void 0, function (createProfileRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createProfileRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('profilesControllerCreate', 'createProfileRequestDto', createProfileRequestDto);
                    localVarPath = "/iam/profiles";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createProfileRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/iam/profiles/me";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerPartialUpdate: function (partialUpdateProfileRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([partialUpdateProfileRequestDto_1], args_1, true), void 0, function (partialUpdateProfileRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'partialUpdateProfileRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('profilesControllerPartialUpdate', 'partialUpdateProfileRequestDto', partialUpdateProfileRequestDto);
                    localVarPath = "/iam/profiles/me";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(partialUpdateProfileRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ProfilesApiAxiosParamCreator = ProfilesApiAxiosParamCreator;
/**
 * ProfilesApi - functional programming interface
 * @export
 */
var ProfilesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ProfilesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.profilesControllerCreate(createProfileRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProfilesApi.profilesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.profilesControllerGetMy(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProfilesApi.profilesControllerGetMy']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerPartialUpdate: function (partialUpdateProfileRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.profilesControllerPartialUpdate(partialUpdateProfileRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ProfilesApi.profilesControllerPartialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ProfilesApiFp = ProfilesApiFp;
/**
 * ProfilesApi - factory interface
 * @export
 */
var ProfilesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ProfilesApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateProfileRequestDto} createProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerCreate: function (createProfileRequestDto, options) {
            return localVarFp.profilesControllerCreate(createProfileRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerGetMy: function (options) {
            return localVarFp.profilesControllerGetMy(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesControllerPartialUpdate: function (partialUpdateProfileRequestDto, options) {
            return localVarFp.profilesControllerPartialUpdate(partialUpdateProfileRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ProfilesApiFactory = ProfilesApiFactory;
/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
var ProfilesApi = /** @class */ (function (_super) {
    __extends(ProfilesApi, _super);
    function ProfilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateProfileRequestDto} createProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.profilesControllerCreate = function (createProfileRequestDto, options) {
        var _this = this;
        return (0, exports.ProfilesApiFp)(this.configuration).profilesControllerCreate(createProfileRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.profilesControllerGetMy = function (options) {
        var _this = this;
        return (0, exports.ProfilesApiFp)(this.configuration).profilesControllerGetMy(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {PartialUpdateProfileRequestDto} partialUpdateProfileRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.profilesControllerPartialUpdate = function (partialUpdateProfileRequestDto, options) {
        var _this = this;
        return (0, exports.ProfilesApiFp)(this.configuration).profilesControllerPartialUpdate(partialUpdateProfileRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ProfilesApi;
}(base_1.BaseAPI));
exports.ProfilesApi = ProfilesApi;
/**
 * ReportsApi - axios parameter creator
 * @export
 */
var ReportsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsEntriesByCategoryReport: function (workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1) {
            var args_1 = [];
            for (var _i = 11; _i < arguments.length; _i++) {
                args_1[_i - 11] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetAccountsEntriesByCategoryReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/accounts/entries-by-category"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (ignoreInternalTransfers !== undefined) {
                        localVarQueryParameter['ignoreInternalTransfers'] = ignoreInternalTransfers;
                    }
                    if (ignoreAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['ignoreAutomaticApplicationRelated'] = ignoreAutomaticApplicationRelated;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsOutputsByCategoryReport: function (workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1) {
            var args_1 = [];
            for (var _i = 11; _i < arguments.length; _i++) {
                args_1[_i - 11] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetAccountsOutputsByCategoryReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/accounts/outputs-by-category"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (ignoreInternalTransfers !== undefined) {
                        localVarQueryParameter['ignoreInternalTransfers'] = ignoreInternalTransfers;
                    }
                    if (ignoreAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['ignoreAutomaticApplicationRelated'] = ignoreAutomaticApplicationRelated;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetBusinessIndicators: function (workspaceId_1, accountIds_1, tagIds_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetBusinessIndicators', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/indicators/business"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsCashFlowReport: function (workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInvoiceRelated_1) {
            var args_1 = [];
            for (var _i = 7; _i < arguments.length; _i++) {
                args_1[_i - 7] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInvoiceRelated_1], args_1, true), void 0, function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetCardsCashFlowReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/cards/cash-flow"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (ignoreInvoiceRelated !== undefined) {
                        localVarQueryParameter['ignoreInvoiceRelated'] = ignoreInvoiceRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsOutputsByCategoryReport: function (workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1, ignoreInvoiceRelated_1) {
            var args_1 = [];
            for (var _i = 10; _i < arguments.length; _i++) {
                args_1[_i - 10] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1, ignoreInvoiceRelated_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetCardsOutputsByCategoryReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/cards/outputs-by-category"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    if (ignoreInvoiceRelated !== undefined) {
                        localVarQueryParameter['ignoreInvoiceRelated'] = ignoreInvoiceRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCashFlowReport: function (workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, categoryIds_1, tagIds_1, legalNatures_1, considerIgnored_1, ignoreInternalTransfers_1, ignoreAutomaticApplicationRelated_1], args_1, true), void 0, function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetCashFlowReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/accounts/cash-flow"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (categoryIds !== undefined) {
                        localVarQueryParameter['categoryIds'] = categoryIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (ignoreInternalTransfers !== undefined) {
                        localVarQueryParameter['ignoreInternalTransfers'] = ignoreInternalTransfers;
                    }
                    if (ignoreAutomaticApplicationRelated !== undefined) {
                        localVarQueryParameter['ignoreAutomaticApplicationRelated'] = ignoreAutomaticApplicationRelated;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetFinancialStatementReport: function (workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, accountIds_1, tagIds_1, legalNatures_1, considerIgnored_1, minPostedDate_1, maxPostedDate_1, minCompetencyDate_1, maxCompetencyDate_1], args_1, true), void 0, function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('reportsControllerGetFinancialStatementReport', 'workspaceId', workspaceId);
                    localVarPath = "/workspaces/{workspaceId}/reports/financial-statement"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (accountIds !== undefined) {
                        localVarQueryParameter['accountIds'] = accountIds;
                    }
                    if (tagIds !== undefined) {
                        localVarQueryParameter['tagIds'] = tagIds;
                    }
                    if (legalNatures !== undefined) {
                        localVarQueryParameter['legalNatures'] = legalNatures;
                    }
                    if (considerIgnored !== undefined) {
                        localVarQueryParameter['considerIgnored'] = considerIgnored;
                    }
                    if (minPostedDate !== undefined) {
                        localVarQueryParameter['minPostedDate'] = minPostedDate;
                    }
                    if (maxPostedDate !== undefined) {
                        localVarQueryParameter['maxPostedDate'] = maxPostedDate;
                    }
                    if (minCompetencyDate !== undefined) {
                        localVarQueryParameter['minCompetencyDate'] = minCompetencyDate;
                    }
                    if (maxCompetencyDate !== undefined) {
                        localVarQueryParameter['maxCompetencyDate'] = maxCompetencyDate;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ReportsApiAxiosParamCreator = ReportsApiAxiosParamCreator;
/**
 * ReportsApi - functional programming interface
 * @export
 */
var ReportsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ReportsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsEntriesByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetAccountsEntriesByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetAccountsEntriesByCategoryReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsOutputsByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetAccountsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetAccountsOutputsByCategoryReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetBusinessIndicators: function (workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetBusinessIndicators(workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetBusinessIndicators']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsCashFlowReport: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetCardsCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetCardsCashFlowReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsOutputsByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetCardsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetCardsOutputsByCategoryReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCashFlowReport: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetCashFlowReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetFinancialStatementReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.reportsControllerGetFinancialStatementReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['ReportsApi.reportsControllerGetFinancialStatementReport']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ReportsApiFp = ReportsApiFp;
/**
 * ReportsApi - factory interface
 * @export
 */
var ReportsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ReportsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsEntriesByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return localVarFp.reportsControllerGetAccountsEntriesByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetAccountsOutputsByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return localVarFp.reportsControllerGetAccountsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetBusinessIndicators: function (workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return localVarFp.reportsControllerGetBusinessIndicators(workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsCashFlowReport: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options) {
            return localVarFp.reportsControllerGetCardsCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {boolean} [ignoreInvoiceRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCardsOutputsByCategoryReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options) {
            return localVarFp.reportsControllerGetCardsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [categoryIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {boolean} [ignoreInternalTransfers]
         * @param {boolean} [ignoreAutomaticApplicationRelated]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetCashFlowReport: function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options) {
            return localVarFp.reportsControllerGetCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} [accountIds]
         * @param {string} [tagIds]
         * @param {string} [legalNatures]
         * @param {boolean} [considerIgnored]
         * @param {string} [minPostedDate]
         * @param {string} [maxPostedDate]
         * @param {string} [minCompetencyDate]
         * @param {string} [maxCompetencyDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsControllerGetFinancialStatementReport: function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
            return localVarFp.reportsControllerGetFinancialStatementReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ReportsApiFactory = ReportsApiFactory;
/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
var ReportsApi = /** @class */ (function (_super) {
    __extends(ReportsApi, _super);
    function ReportsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetAccountsEntriesByCategoryReport = function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetAccountsEntriesByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetAccountsOutputsByCategoryReport = function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetAccountsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetBusinessIndicators = function (workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetBusinessIndicators(workspaceId, accountIds, tagIds, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetCardsCashFlowReport = function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetCardsCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInvoiceRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {boolean} [ignoreInvoiceRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetCardsOutputsByCategoryReport = function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetCardsOutputsByCategoryReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, ignoreInvoiceRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [categoryIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {boolean} [ignoreInternalTransfers]
     * @param {boolean} [ignoreAutomaticApplicationRelated]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetCashFlowReport = function (workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetCashFlowReport(workspaceId, accountIds, categoryIds, tagIds, legalNatures, considerIgnored, ignoreInternalTransfers, ignoreAutomaticApplicationRelated, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {string} [accountIds]
     * @param {string} [tagIds]
     * @param {string} [legalNatures]
     * @param {boolean} [considerIgnored]
     * @param {string} [minPostedDate]
     * @param {string} [maxPostedDate]
     * @param {string} [minCompetencyDate]
     * @param {string} [maxCompetencyDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    ReportsApi.prototype.reportsControllerGetFinancialStatementReport = function (workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options) {
        var _this = this;
        return (0, exports.ReportsApiFp)(this.configuration).reportsControllerGetFinancialStatementReport(workspaceId, accountIds, tagIds, legalNatures, considerIgnored, minPostedDate, maxPostedDate, minCompetencyDate, maxCompetencyDate, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ReportsApi;
}(base_1.BaseAPI));
exports.ReportsApi = ReportsApi;
/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
var WorkspacesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([createWorkspaceRequestDto_1], args_1, true), void 0, function (createWorkspaceRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'createWorkspaceRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('workspacesControllerCreate', 'createWorkspaceRequestDto', createWorkspaceRequestDto);
                    localVarPath = "/iam/workspaces";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWorkspaceRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerGetById: function (workspaceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1], args_1, true), void 0, function (workspaceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('workspacesControllerGetById', 'workspaceId', workspaceId);
                    localVarPath = "/iam/workspaces/{workspaceId}"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerListMy: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/iam/workspaces/my";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {PartialUpdateWorkspaceRequestDto} partialUpdateWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerPartialUpdate: function (workspaceId_1, partialUpdateWorkspaceRequestDto_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([workspaceId_1, partialUpdateWorkspaceRequestDto_1], args_1, true), void 0, function (workspaceId, partialUpdateWorkspaceRequestDto, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    // verify required parameter 'workspaceId' is not null or undefined
                    (0, common_1.assertParamExists)('workspacesControllerPartialUpdate', 'workspaceId', workspaceId);
                    // verify required parameter 'partialUpdateWorkspaceRequestDto' is not null or undefined
                    (0, common_1.assertParamExists)('workspacesControllerPartialUpdate', 'partialUpdateWorkspaceRequestDto', partialUpdateWorkspaceRequestDto);
                    localVarPath = "/iam/workspaces/{workspaceId}"
                        .replace("{".concat("workspaceId", "}"), encodeURIComponent(String(workspaceId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(partialUpdateWorkspaceRequestDto, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.WorkspacesApiAxiosParamCreator = WorkspacesApiAxiosParamCreator;
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
var WorkspacesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkspacesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspacesControllerCreate(createWorkspaceRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkspacesApi.workspacesControllerCreate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerGetById: function (workspaceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspacesControllerGetById(workspaceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkspacesApi.workspacesControllerGetById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerListMy: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspacesControllerListMy(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkspacesApi.workspacesControllerListMy']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {PartialUpdateWorkspaceRequestDto} partialUpdateWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerPartialUpdate: function (workspaceId, partialUpdateWorkspaceRequestDto, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.workspacesControllerPartialUpdate(workspaceId, partialUpdateWorkspaceRequestDto, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['WorkspacesApi.workspacesControllerPartialUpdate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.WorkspacesApiFp = WorkspacesApiFp;
/**
 * WorkspacesApi - factory interface
 * @export
 */
var WorkspacesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkspacesApiFp)(configuration);
    return {
        /**
         *
         * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerCreate: function (createWorkspaceRequestDto, options) {
            return localVarFp.workspacesControllerCreate(createWorkspaceRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerGetById: function (workspaceId, options) {
            return localVarFp.workspacesControllerGetById(workspaceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerListMy: function (options) {
            return localVarFp.workspacesControllerListMy(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} workspaceId
         * @param {PartialUpdateWorkspaceRequestDto} partialUpdateWorkspaceRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspacesControllerPartialUpdate: function (workspaceId, partialUpdateWorkspaceRequestDto, options) {
            return localVarFp.workspacesControllerPartialUpdate(workspaceId, partialUpdateWorkspaceRequestDto, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkspacesApiFactory = WorkspacesApiFactory;
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
var WorkspacesApi = /** @class */ (function (_super) {
    __extends(WorkspacesApi, _super);
    function WorkspacesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {CreateWorkspaceRequestDto} createWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.workspacesControllerCreate = function (createWorkspaceRequestDto, options) {
        var _this = this;
        return (0, exports.WorkspacesApiFp)(this.configuration).workspacesControllerCreate(createWorkspaceRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.workspacesControllerGetById = function (workspaceId, options) {
        var _this = this;
        return (0, exports.WorkspacesApiFp)(this.configuration).workspacesControllerGetById(workspaceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.workspacesControllerListMy = function (options) {
        var _this = this;
        return (0, exports.WorkspacesApiFp)(this.configuration).workspacesControllerListMy(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} workspaceId
     * @param {PartialUpdateWorkspaceRequestDto} partialUpdateWorkspaceRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.workspacesControllerPartialUpdate = function (workspaceId, partialUpdateWorkspaceRequestDto, options) {
        var _this = this;
        return (0, exports.WorkspacesApiFp)(this.configuration).workspacesControllerPartialUpdate(workspaceId, partialUpdateWorkspaceRequestDto, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkspacesApi;
}(base_1.BaseAPI));
exports.WorkspacesApi = WorkspacesApi;
